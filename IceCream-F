{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ice Cream\n",
    "\n",
    "## Weather, wealth, and ice cream\n",
    "\n",
    "### Question to be answered\n",
    "\n",
    "*The question is: Where should I locate my new ice cream shop?*\n",
    "\n",
    "Taking into account available resources, constraints, and business considerations, this can be refined into two research questions:\n",
    "\n",
    "* Which zip codes in New York, Chicago, Houston, and Miami are under/over served by ice cream stores?\n",
    "\n",
    "* Which is the strongest predictor of ice cream store density, population density, household income or weather?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data sources\n",
    "\n",
    "| Information Needed | Data Source | Method\n",
    "| --- | --- | --- |\n",
    "| Zip codes | zip-codes.com | Search by city, extract zip codes\n",
    "| Ice cream shops | Foursquare | Venue query on ice cream, extract zip code\n",
    "| Weather | USClimateData.com | Request by city (note: DarkSky cut free api after Apple's purchase, NOAA was difficult to use)\n",
    "| Income, Population | US Census/ACS | Zip code search, extract median household income, population\n",
    "| Geo data | WolframAlpha | Zip code search, extract area\n",
    "| Geo data | USZipCode from PyPi  | Need to associate zip code with longitude and latitude\n",
    "\n",
    "### Methodology\n",
    "Gather data\n",
    "1. Create a table with zip codes for neighborhoods in Chicago, Houston, Miami, New York\n",
    "2. Count number of ice cream shops in each zip code\n",
    "3. Find typical weather for each zip code\n",
    "4. Find income for each zip code\n",
    "5. Find population for each zip code\n",
    "6. Find area covered by each zip code\n",
    "\n",
    "Explore data\n",
    "1. What is the relationship between weather and ice cream shop density (intra/inter city)\n",
    "2. What is the relationship between population and ice cream shop density (intra/inter city)\n",
    "3. What is the relationship between income and ice cream shop density (intra/inter city)\n",
    "\n",
    "Identify correlations and model relationships\n",
    "1. Which variable has the strongest explanitory power\n",
    "2. Build a model of the relationship between the independent variables (temperature, population, area (sq.mi.), income, latitude, longitude, city) and the number of ice cream stores present\n",
    "\n",
    "Identify under served neighborhood\n",
    "1. Which neighborhoods in each city are under-served by ice cream in nominal terms\n",
    "2. Which neighborhoods in each city are under-served by ice cream relative to modelled outcomes\n",
    "\n",
    "Conclusion\n",
    "1. Find the neighborhood (as defined by zip code) which now has the fewest ice cream shops relative to number of ice cream shops predicted by the model.  This zip code is the best location for a new shop.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "### Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: beautifulsoup4 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (4.9.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from beautifulsoup4) (2.0.1)\n",
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: done\n",
      "\n",
      "\n",
      "==> WARNING: A newer version of conda exists. <==\n",
      "  current version: 4.8.3\n",
      "  latest version: 4.8.4\n",
      "\n",
      "Please update conda by running\n",
      "\n",
      "    $ conda update -n base -c defaults conda\n",
      "\n",
      "\n",
      "\n",
      "# All requested packages already installed.\n",
      "\n",
      "Requirement already satisfied: uszipcode in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (0.2.4)\n",
      "Requirement already satisfied: requests in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from uszipcode) (2.24.0)\n",
      "Requirement already satisfied: sqlalchemy in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from uszipcode) (1.3.18)\n",
      "Requirement already satisfied: attrs in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from uszipcode) (19.3.0)\n",
      "Requirement already satisfied: pathlib-mate in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from uszipcode) (1.0.0)\n",
      "Requirement already satisfied: idna<3,>=2.5 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->uszipcode) (2.10)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->uszipcode) (2020.6.20)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->uszipcode) (1.25.10)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from requests->uszipcode) (3.0.4)\n",
      "Requirement already satisfied: autopep8 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from pathlib-mate->uszipcode) (1.5.4)\n",
      "Requirement already satisfied: six in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from pathlib-mate->uszipcode) (1.15.0)\n",
      "Requirement already satisfied: toml in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from autopep8->pathlib-mate->uszipcode) (0.10.1)\n",
      "Requirement already satisfied: pycodestyle>=2.6.0 in /home/jupyterlab/conda/envs/python/lib/python3.6/site-packages (from autopep8->pathlib-mate->uszipcode) (2.6.0)\n"
     ]
    }
   ],
   "source": [
    "# load libraries\n",
    "\n",
    "# data analysis and exploration\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "import matplotlib.pyplot\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "\n",
    "# data handling\n",
    "import ast #turns list-like strings into lists\n",
    "import re #for regular expressions\n",
    "import requests\n",
    "import json\n",
    "from pandas import json_normalize\n",
    "import urllib.request\n",
    "!pip install beautifulsoup4\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "# models\n",
    "import scipy\n",
    "import random\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.cluster import DBSCAN\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn import linear_model\n",
    "from sklearn.metrics import r2_score\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "# maps\n",
    "!conda install -c conda-forge folium=0.5.0 --yes\n",
    "import folium\n",
    "\n",
    "# data\n",
    "!pip install uszipcode\n",
    "from uszipcode import SearchEngine\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Gather Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create data frame to hold data\n",
    "\n",
    "df = pd.DataFrame(columns=['Zip','City','Area','Population','Weather', 'Income','Ice Cream'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gather Zip Codes for Each City"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Chicago': ['60290', '60601', '60602', '60603', '60604', '60605', '60606', '60607', '60608', '60610', '60611', '60614', '60615', '60618', '60619', '60622', '60623', '60624', '60628', '60609', '60612', '60613', '60616', '60617', '60620', '60621', '60625', '60626', '60629', '60630', '60632', '60636', '60637', '60631', '60633', '60634', '60638', '60641', '60642', '60643', '60646', '60647', '60652', '60653', '60656', '60660', '60661', '60664', '60639', '60640', '60644', '60645', '60649', '60651', '60654', '60655', '60657', '60659', '60666', '60668', '60673', '60677', '60669', '60670', '60674', '60675', '60678', '60680', '60681', '60682', '60686', '60687', '60688', '60689', '60694', '60695', '60697', '60699', '60684', '60685', '60690', '60691', '60693', '60696', '60701'], 'Houston': ['77004', '77005', '77008', '77009', '77010', '77015', '77016', '77017', '77022', '77023', '77001', '77002', '77003', '77006', '77007', '77011', '77012', '77013', '77014', '77018', '77019', '77020', '77021', '77024', '77025', '77026', '77027', '77028', '77031', '77032', '77033', '77029', '77030', '77034', '77035', '77036', '77037', '77038', '77039', '77041', '77045', '77046', '77047', '77052', '77053', '77054', '77058', '77040', '77042', '77043', '77044', '77048', '77049', '77050', '77051', '77055', '77056', '77057', '77059', '77060', '77061', '77062', '77065', '77066', '77067', '77068', '77069', '77070', '77075', '77076', '77077', '77078', '77063', '77064', '77071', '77072', '77073', '77074', '77079', '77080', '77081', '77085', '77086', '77087', '77088', '77093', '77094', '77095', '77096', '77203', '77204', '77205', '77206', '77212', '77213', '77215', '77216', '77221', '77222', '77223', '77224', '77082', '77083', '77084', '77089', '77090', '77091', '77092', '77098', '77099', '77201', '77202', '77207', '77208', '77209', '77210', '77217', '77218', '77219', '77220', '77225', '77226', '77227', '77228', '77229', '77235', '77236', '77237', '77238', '77240', '77248', '77249', '77251', '77252', '77253', '77230', '77231', '77233', '77234', '77241', '77242', '77243', '77244', '77245', '77254', '77255', '77256', '77257', '77258', '77265', '77266', '77267', '77268', '77269', '77275', '77277', '77279', '77280', '77290', '77291', '77292', '77293', '77297', '77259', '77261', '77262', '77263', '77270', '77271', '77272', '77273', '77274', '77282', '77284', '77287', '77288', '77289', '77299'], 'Miami': ['33111', '33122', '33126', '33127', '33128', '33133', '33101', '33102', '33106', '33112', '33116', '33124', '33125', '33129', '33130', '33131', '33132', '33134', '33135', '33136', '33137', '33144', '33138', '33142', '33143', '33145', '33147', '33153', '33146', '33150', '33151', '33152', '33155', '33156', '33157', '33158', '33161', '33159', '33163', '33164', '33165', '33162', '33166', '33167', '33172', '33174', '33176', '33178', '33168', '33169', '33170', '33173', '33175', '33177', '33179', '33181', '33182', '33180', '33184', '33185', '33186', '33187', '33189', '33193', '33194', '33197', '33199', '33231', '33233', '33183', '33188', '33190', '33196', '33206', '33222', '33234', '33238', '33245', '33247', '33255', '33242', '33243', '33256', '33261', '33265', '33283', '33257', '33266', '33269', '33280', '33296', '33299'], 'New': ['10001', '10002', '10003', '10007', '10008', '10004', '10005', '10006', '10011', '10009', '10010', '10013', '10014', '10016', '10012', '10017', '10018', '10019', '10022', '10020', '10021', '10025', '10026', '10029', '10023', '10024', '10027', '10028', '10032', '10030', '10031', '10037', '10033', '10034', '10035', '10036', '10038', '10039', '10040', '10041', '10043', '10060', '10065', '10069', '10075', '10044', '10045', '10055', '10080', '10081', '10095', '10087', '10090', '10102', '10103', '10106', '10101', '10104', '10105', '10108', '10109', '10107', '10110', '10111', '10114', '10115', '10116', '10112', '10113', '10117', '10119', '10121', '10118', '10120', '10123', '10125', '10130', '10133', '10122', '10124', '10126', '10128', '10129', '10131', '10132', '10138', '10150', '10151', '10153', '10152', '10155', '10156', '10158', '10160', '10161', '10154', '10157', '10159', '10162', '10163', '10165', '10164', '10166', '10167', '10170', '10171', '10168', '10169', '10172', '10173', '10176', '10174', '10175', '10177', '10179', '10200', '10203', '10211', '10213', '10242', '10178', '10185', '10199', '10212', '10249', '10256', '10259', '10257', '10258', '10265', '10268', '10271', '10272', '10273', '10276', '10277', '10278', '10260', '10261', '10269', '10270', '10274', '10275', '10279', '10280', '10282', '10281', '10285', '10286', '10292']}\n"
     ]
    }
   ],
   "source": [
    "# Import zip codes\n",
    "url_chi = 'https://zipcode.org/city/IL/CHICAGO'\n",
    "url_hou = 'https://zipcode.org/city/TX/HOUSTON'\n",
    "url_mia = 'https://zipcode.org/city/FL/MIAMI'\n",
    "url_nyc = 'https://zipcode.org/city/NY/NEWYORK'\n",
    "url_list = [url_chi, url_hou, url_mia, url_nyc]\n",
    "\n",
    "# Initial plan was to use beautfulsoup, but coulnd't make it work\n",
    "# Instead use regex to extract zip codes\n",
    "\n",
    "# set up a dictionary to hold results\n",
    "master_dict = {}\n",
    "\n",
    "# loop through each url, load page\n",
    "for url in url_list:\n",
    "    page = requests.get(url, allow_redirects=False, timeout=30)\n",
    "    page = page.text\n",
    "    \n",
    "    # examine the text of the url, use regex to find the zip codes\n",
    "    city = re.search('(?<=City of )\\w+', page) #find city name as key to dictionary\n",
    "    city = city.group()\n",
    "    zips=re.findall('(?<=\"List_Link_Text\">)\\d\\d\\d\\d\\d', page) #find all zip codes add to dictionary\n",
    "    \n",
    "    # add values to master_dict \n",
    "    master_dict[city]=zips\n",
    "\n",
    "print(master_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Chicago': ['60290', '60601', '60602', '60603', '60604', '60605', '60606', '60607', '60608', '60610', '60611', '60614', '60615', '60618', '60619', '60622', '60623', '60624', '60628', '60609', '60612', '60613', '60616', '60617', '60620', '60621', '60625', '60626', '60629', '60630', '60632', '60636', '60637', '60631', '60633', '60634', '60638', '60641', '60642', '60643', '60646', '60647', '60652', '60653', '60656', '60660', '60661', '60664', '60639', '60640', '60644', '60645', '60649', '60651', '60654', '60655', '60657', '60659', '60666', '60668', '60673', '60677', '60669', '60670', '60674', '60675', '60678', '60680', '60681', '60682', '60686', '60687', '60688', '60689', '60694', '60695', '60697', '60699', '60684', '60685', '60690', '60691', '60693', '60696', '60701', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], 'Houston': ['77004', '77005', '77008', '77009', '77010', '77015', '77016', '77017', '77022', '77023', '77001', '77002', '77003', '77006', '77007', '77011', '77012', '77013', '77014', '77018', '77019', '77020', '77021', '77024', '77025', '77026', '77027', '77028', '77031', '77032', '77033', '77029', '77030', '77034', '77035', '77036', '77037', '77038', '77039', '77041', '77045', '77046', '77047', '77052', '77053', '77054', '77058', '77040', '77042', '77043', '77044', '77048', '77049', '77050', '77051', '77055', '77056', '77057', '77059', '77060', '77061', '77062', '77065', '77066', '77067', '77068', '77069', '77070', '77075', '77076', '77077', '77078', '77063', '77064', '77071', '77072', '77073', '77074', '77079', '77080', '77081', '77085', '77086', '77087', '77088', '77093', '77094', '77095', '77096', '77203', '77204', '77205', '77206', '77212', '77213', '77215', '77216', '77221', '77222', '77223', '77224', '77082', '77083', '77084', '77089', '77090', '77091', '77092', '77098', '77099', '77201', '77202', '77207', '77208', '77209', '77210', '77217', '77218', '77219', '77220', '77225', '77226', '77227', '77228', '77229', '77235', '77236', '77237', '77238', '77240', '77248', '77249', '77251', '77252', '77253', '77230', '77231', '77233', '77234', '77241', '77242', '77243', '77244', '77245', '77254', '77255', '77256', '77257', '77258', '77265', '77266', '77267', '77268', '77269', '77275', '77277', '77279', '77280', '77290', '77291', '77292', '77293', '77297', '77259', '77261', '77262', '77263', '77270', '77271', '77272', '77273', '77274', '77282', '77284', '77287', '77288', '77289', '77299'], 'Miami': ['33111', '33122', '33126', '33127', '33128', '33133', '33101', '33102', '33106', '33112', '33116', '33124', '33125', '33129', '33130', '33131', '33132', '33134', '33135', '33136', '33137', '33144', '33138', '33142', '33143', '33145', '33147', '33153', '33146', '33150', '33151', '33152', '33155', '33156', '33157', '33158', '33161', '33159', '33163', '33164', '33165', '33162', '33166', '33167', '33172', '33174', '33176', '33178', '33168', '33169', '33170', '33173', '33175', '33177', '33179', '33181', '33182', '33180', '33184', '33185', '33186', '33187', '33189', '33193', '33194', '33197', '33199', '33231', '33233', '33183', '33188', '33190', '33196', '33206', '33222', '33234', '33238', '33245', '33247', '33255', '33242', '33243', '33256', '33261', '33265', '33283', '33257', '33266', '33269', '33280', '33296', '33299', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'], 'New': ['10001', '10002', '10003', '10007', '10008', '10004', '10005', '10006', '10011', '10009', '10010', '10013', '10014', '10016', '10012', '10017', '10018', '10019', '10022', '10020', '10021', '10025', '10026', '10029', '10023', '10024', '10027', '10028', '10032', '10030', '10031', '10037', '10033', '10034', '10035', '10036', '10038', '10039', '10040', '10041', '10043', '10060', '10065', '10069', '10075', '10044', '10045', '10055', '10080', '10081', '10095', '10087', '10090', '10102', '10103', '10106', '10101', '10104', '10105', '10108', '10109', '10107', '10110', '10111', '10114', '10115', '10116', '10112', '10113', '10117', '10119', '10121', '10118', '10120', '10123', '10125', '10130', '10133', '10122', '10124', '10126', '10128', '10129', '10131', '10132', '10138', '10150', '10151', '10153', '10152', '10155', '10156', '10158', '10160', '10161', '10154', '10157', '10159', '10162', '10163', '10165', '10164', '10166', '10167', '10170', '10171', '10168', '10169', '10172', '10173', '10176', '10174', '10175', '10177', '10179', '10200', '10203', '10211', '10213', '10242', '10178', '10185', '10199', '10212', '10249', '10256', '10259', '10257', '10258', '10265', '10268', '10271', '10272', '10273', '10276', '10277', '10278', '10260', '10261', '10269', '10270', '10274', '10275', '10279', '10280', '10282', '10281', '10285', '10286', '10292', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']}\n"
     ]
    }
   ],
   "source": [
    "# Make disctionary lists the same length for each key so that it is easy to create data frame\n",
    "keys_dict = list(master_dict.keys())\n",
    "maximum = 0\n",
    "for keys in keys_dict:\n",
    "        maximum = max(len(master_dict[keys]), maximum)\n",
    "for keys in keys_dict:\n",
    "        number_needed = maximum - len(master_dict[keys])\n",
    "        for i in range(0, number_needed):\n",
    "            master_dict[keys].append('0')\n",
    "print(master_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Chicago</th>\n",
       "      <th>Houston</th>\n",
       "      <th>Miami</th>\n",
       "      <th>New</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60290</td>\n",
       "      <td>77004</td>\n",
       "      <td>33111</td>\n",
       "      <td>10001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60601</td>\n",
       "      <td>77005</td>\n",
       "      <td>33122</td>\n",
       "      <td>10002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60602</td>\n",
       "      <td>77008</td>\n",
       "      <td>33126</td>\n",
       "      <td>10003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60603</td>\n",
       "      <td>77009</td>\n",
       "      <td>33127</td>\n",
       "      <td>10007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60604</td>\n",
       "      <td>77010</td>\n",
       "      <td>33128</td>\n",
       "      <td>10008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60605</td>\n",
       "      <td>77015</td>\n",
       "      <td>33133</td>\n",
       "      <td>10004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>60606</td>\n",
       "      <td>77016</td>\n",
       "      <td>33101</td>\n",
       "      <td>10005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>60607</td>\n",
       "      <td>77017</td>\n",
       "      <td>33102</td>\n",
       "      <td>10006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>60608</td>\n",
       "      <td>77022</td>\n",
       "      <td>33106</td>\n",
       "      <td>10011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>60610</td>\n",
       "      <td>77023</td>\n",
       "      <td>33112</td>\n",
       "      <td>10009</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Chicago Houston  Miami    New\n",
       "0   60290   77004  33111  10001\n",
       "1   60601   77005  33122  10002\n",
       "2   60602   77008  33126  10003\n",
       "3   60603   77009  33127  10007\n",
       "4   60604   77010  33128  10008\n",
       "5   60605   77015  33133  10004\n",
       "6   60606   77016  33101  10005\n",
       "7   60607   77017  33102  10006\n",
       "8   60608   77022  33106  10011\n",
       "9   60610   77023  33112  10009"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create data frame from series\n",
    "master_df = pd.DataFrame(master_dict)\n",
    "master_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Chicago</th>\n",
       "      <th>Houston</th>\n",
       "      <th>Miami</th>\n",
       "      <th>New</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>178</td>\n",
       "      <td>178</td>\n",
       "      <td>178</td>\n",
       "      <td>178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>86</td>\n",
       "      <td>178</td>\n",
       "      <td>93</td>\n",
       "      <td>151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>0</td>\n",
       "      <td>77075</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>93</td>\n",
       "      <td>1</td>\n",
       "      <td>86</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Chicago Houston Miami  New\n",
       "count      178     178   178  178\n",
       "unique      86     178    93  151\n",
       "top          0   77075     0    0\n",
       "freq        93       1    86   28"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "master_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for each zip, create a data frame with (area, population, income) for each zip code\n",
    "# Create a list of list: each sub-list is [zip, area, pop, income, weather]\n",
    "# For now, weather is dummy -- fill in later\n",
    "\n",
    "# create a list of all zip codes - this will be the first value for the master list\n",
    "all_zips =[]\n",
    "\n",
    "for keys in keys_dict:\n",
    "    all_zips.append(master_dict[keys])\n",
    "    \n",
    "zip_list = []\n",
    "for sublist in all_zips:\n",
    "    for item in sublist:\n",
    "        zip_list.append(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "505 zips long ['60290', '60601', '60602', '60603', '60604', '60605', '60606', '60607', '60608', '60610', '60611', '60614', '60615', '60618', '60619', '60622', '60623', '60624', '60628', '60609', '60612', '60613', '60616', '60617', '60620', '60621', '60625', '60626', '60629', '60630', '60632', '60636', '60637', '60631', '60633', '60634', '60638', '60641', '60642', '60643', '60646', '60647', '60652', '60653', '60656', '60660', '60661', '60664', '60639', '60640', '60644', '60645', '60649', '60651', '60654', '60655', '60657', '60659', '60666', '60668', '60673', '60677', '60669', '60670', '60674', '60675', '60678', '60680', '60681', '60682', '60686', '60687', '60688', '60689', '60694', '60695', '60697', '60699', '60684', '60685', '60690', '60691', '60693', '60696', '60701', '77004', '77005', '77008', '77009', '77010', '77015', '77016', '77017', '77022', '77023', '77001', '77002', '77003', '77006', '77007', '77011', '77012', '77013', '77014', '77018', '77019', '77020', '77021', '77024', '77025', '77026', '77027', '77028', '77031', '77032', '77033', '77029', '77030', '77034', '77035', '77036', '77037', '77038', '77039', '77041', '77045', '77046', '77047', '77052', '77053', '77054', '77058', '77040', '77042', '77043', '77044', '77048', '77049', '77050', '77051', '77055', '77056', '77057', '77059', '77060', '77061', '77062', '77065', '77066', '77067', '77068', '77069', '77070', '77075', '77076', '77077', '77078', '77063', '77064', '77071', '77072', '77073', '77074', '77079', '77080', '77081', '77085', '77086', '77087', '77088', '77093', '77094', '77095', '77096', '77203', '77204', '77205', '77206', '77212', '77213', '77215', '77216', '77221', '77222', '77223', '77224', '77082', '77083', '77084', '77089', '77090', '77091', '77092', '77098', '77099', '77201', '77202', '77207', '77208', '77209', '77210', '77217', '77218', '77219', '77220', '77225', '77226', '77227', '77228', '77229', '77235', '77236', '77237', '77238', '77240', '77248', '77249', '77251', '77252', '77253', '77230', '77231', '77233', '77234', '77241', '77242', '77243', '77244', '77245', '77254', '77255', '77256', '77257', '77258', '77265', '77266', '77267', '77268', '77269', '77275', '77277', '77279', '77280', '77290', '77291', '77292', '77293', '77297', '77259', '77261', '77262', '77263', '77270', '77271', '77272', '77273', '77274', '77282', '77284', '77287', '77288', '77289', '77299', '33111', '33122', '33126', '33127', '33128', '33133', '33101', '33102', '33106', '33112', '33116', '33124', '33125', '33129', '33130', '33131', '33132', '33134', '33135', '33136', '33137', '33144', '33138', '33142', '33143', '33145', '33147', '33153', '33146', '33150', '33151', '33152', '33155', '33156', '33157', '33158', '33161', '33159', '33163', '33164', '33165', '33162', '33166', '33167', '33172', '33174', '33176', '33178', '33168', '33169', '33170', '33173', '33175', '33177', '33179', '33181', '33182', '33180', '33184', '33185', '33186', '33187', '33189', '33193', '33194', '33197', '33199', '33231', '33233', '33183', '33188', '33190', '33196', '33206', '33222', '33234', '33238', '33245', '33247', '33255', '33242', '33243', '33256', '33261', '33265', '33283', '33257', '33266', '33269', '33280', '33296', '33299', '10001', '10002', '10003', '10007', '10008', '10004', '10005', '10006', '10011', '10009', '10010', '10013', '10014', '10016', '10012', '10017', '10018', '10019', '10022', '10020', '10021', '10025', '10026', '10029', '10023', '10024', '10027', '10028', '10032', '10030', '10031', '10037', '10033', '10034', '10035', '10036', '10038', '10039', '10040', '10041', '10043', '10060', '10065', '10069', '10075', '10044', '10045', '10055', '10080', '10081', '10095', '10087', '10090', '10102', '10103', '10106', '10101', '10104', '10105', '10108', '10109', '10107', '10110', '10111', '10114', '10115', '10116', '10112', '10113', '10117', '10119', '10121', '10118', '10120', '10123', '10125', '10130', '10133', '10122', '10124', '10126', '10128', '10129', '10131', '10132', '10138', '10150', '10151', '10153', '10152', '10155', '10156', '10158', '10160', '10161', '10154', '10157', '10159', '10162', '10163', '10165', '10164', '10166', '10167', '10170', '10171', '10168', '10169', '10172', '10173', '10176', '10174', '10175', '10177', '10179', '10200', '10203', '10211', '10213', '10242', '10178', '10185', '10199', '10212', '10249', '10256', '10259', '10257', '10258', '10265', '10268', '10271', '10272', '10273', '10276', '10277', '10278', '10260', '10261', '10269', '10270', '10274', '10275', '10279', '10280', '10282', '10281', '10285', '10286', '10292']\n"
     ]
    }
   ],
   "source": [
    "# strip out zeros\n",
    "a_='0'\n",
    "while a_ in zip_list:\n",
    "    zip_list.remove(a_)\n",
    "\n",
    "print(str(len(zip_list))+' zips long '+str(zip_list))\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# temporary code to shorten the length of zip_list during testing\n",
    "# remove this block and everything will work\n",
    "import random\n",
    "random.seed(4)\n",
    "zip_list = random.sample(zip_list, 100)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gather Lat and Lon for Each Zip Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find lat and long for each zip code\n",
    "\n",
    "zip_ll_dict = {'zip': [], 'lat': [], 'lon':[]}\n",
    "\n",
    "#create zip coce search object\n",
    "search = SearchEngine(simple_zipcode=True)\n",
    "\n",
    "for zip_ in zip_list:\n",
    "    zipcode = search.by_zipcode(zip_)\n",
    "    zipcode = zipcode.to_dict()\n",
    "    a_=zipcode['lng']\n",
    "    b_=zipcode['lat']\n",
    "    zip_ll_dict['zip'].append(zip_)\n",
    "    zip_ll_dict['lat'].append(b_)\n",
    "    zip_ll_dict['lon'].append(a_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'zip': ['77036', '77077', '60649', '10012', '77218', '77292', '60685', '60661', '60633', '60611', '77225', '33135', '10179', '77066', '10103', '10038', '60632', '77031', '33127', '33124', '77223', '77056', '10075', '77009', '10113', '60654', '77043', '77025', '10242', '60618', '10117', '33197', '10105', '77042', '10277', '77051', '77007', '60701', '77064', '10278', '33184', '10152', '10020', '10129', '10124', '10154', '77090', '60656', '10133', '33178', '77095', '33242', '77208', '77287', '77047', '77016', '77046', '77280', '77059', '60660', '10111', '10153', '33134', '10125', '77075', '60603', '77067', '33151', '10004', '77071', '10171', '10276', '77288', '10177', '77236', '77249', '33167', '77065', '77230', '77256', '60693', '77035', '77078', '77040', '10107', '10102', '60616', '60647', '60617', '77267', '33180', '10156', '33126', '33116', '33233', '77279', '10007', '77204', '60694', '33243'], 'lat': [29.69, 29.75, 41.77, 40.726, None, None, None, 41.883, 41.67, 41.91, None, 25.77, None, 29.96, 40.761, 40.71, 41.82, 29.66, 25.81, None, None, 29.75, 40.77, 29.79, None, 41.89, 29.81, 29.68, None, 41.95, None, None, None, 29.74, None, 29.66, 29.77, None, 29.93, 40.715, 25.76, 40.7584, 40.759, None, None, 40.758, 30.0, 41.97, None, 25.85, 29.91, None, None, None, 29.61, 29.86, 29.732, None, 29.61, 41.98, 40.7591, 40.7639, 25.75, None, 29.62, 41.88, 29.95, None, 40.7, 29.65, 40.756, None, None, 40.791, None, None, 25.89, 29.92, None, None, None, 29.65, 29.85, 29.87, None, None, 41.84, 41.92, 41.73, None, 25.96, None, 25.78, None, None, None, 40.714, None, None, None], 'lon': [-95.53, -95.63, -87.56, -73.998, None, None, None, -87.644, -87.56, -87.61, None, -80.23, None, -95.5, -73.978, -74.003, -87.69, -95.55, -80.21, None, None, -95.47, -73.96, -95.37, None, -87.64, -95.58, -95.43, None, -87.7, None, None, None, -95.56, None, -95.37, -95.41, None, -95.54, -74.004, -80.41, -73.9718, -73.981, None, None, -73.972, -95.45, -87.82, None, -80.37, -95.64, None, None, None, -95.38, -95.3, -95.435, None, -95.12, -87.66, -73.9776, -73.9733, -80.27, None, -95.26, -87.629, -95.45, None, -74.02, -95.52, -73.974, None, None, -73.966, None, None, -80.24, -95.61, None, None, None, -95.48, -95.26, -95.54, None, None, -87.62, -87.7, -87.55, None, -80.14, None, -80.3, None, None, None, -74.008, None, None, None]}\n"
     ]
    }
   ],
   "source": [
    "print(zip_ll_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gather Population and Income for Each Zip Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'zip': ['77036', '77077', '60649', '10012', '77218', '77292', '60685', '60661', '60633', '60611', '77225', '33135', '10179', '77066', '10103', '10038', '60632', '77031', '33127', '33124', '77223', '77056', '10075', '77009', '10113', '60654', '77043', '77025', '10242', '60618', '10117', '33197', '10105', '77042', '10277', '77051', '77007', '60701', '77064', '10278', '33184', '10152', '10020', '10129', '10124', '10154', '77090', '60656', '10133', '33178', '77095', '33242', '77208', '77287', '77047', '77016', '77046', '77280', '77059', '60660', '10111', '10153', '33134', '10125', '77075', '60603', '77067', '33151', '10004', '77071', '10171', '10276', '77288', '10177', '77236', '77249', '33167', '77065', '77230', '77256', '60693', '77035', '77078', '77040', '10107', '10102', '60616', '60647', '60617', '77267', '33180', '10156', '33126', '33116', '33233', '77279', '10007', '77204', '60694', '33243'], 'population': ['76831', '58131', '46024', '23411', 'unknown', 'unknown', 'unknown', '9926', '12871', '32426', 'unknown', '39789', 'unknown', '36703', '0', '22800', '91039', '17536', '33464', 'unknown', 'unknown', '21807', '21556', '36260', 'unknown', '19135', '25447', '28955', 'unknown', '94395', 'unknown', 'unknown', 'unknown', '42515', 'unknown', '17052', '37492', 'unknown', '49790', '0', '21733', '0', '0', 'unknown', 'unknown', '0', '39381', '27579', 'unknown', '51459', '71878', 'unknown', 'unknown', 'unknown', '29693', '30184', '970', 'unknown', '16944', '43242', '0', '0', '41861', 'unknown', '43933', '1174', '34575', 'unknown', '3028', '28558', '0', 'unknown', 'unknown', '0', 'unknown', 'unknown', '19837', '38265', 'unknown', 'unknown', 'unknown', '38524', '15411', '48290', 'unknown', 'unknown', '54464', '87509', '82534', 'unknown', '31883', 'unknown', '52987', 'unknown', 'unknown', 'unknown', '7023', 'unknown', 'unknown', 'unknown'], 'income': ['30632', '65922', '30222', '109037', 'unknown', 'unknown', 'unknown', '107245', '47083', '103522', 'unknown', '27172', 'unknown', '60106', '-666666666', '86058', '42758', '50155', '30231', 'unknown', 'unknown', '109515', '137146', '53116', 'unknown', '112699', '64298', '74792', 'unknown', '73810', 'unknown', 'unknown', 'unknown', '48269', 'unknown', '27496', '124355', 'unknown', '70324', '-666666666', '50569', '-666666666', '-666666666', 'unknown', 'unknown', '-666666666', '39879', '61599', 'unknown', '80554', '94290', 'unknown', 'unknown', 'unknown', '64648', '34885', '81803', 'unknown', '134688', '49241', '-666666666', '-666666666', '67818', 'unknown', '53633', '151765', '41859', 'unknown', '157645', '46801', '-666666666', 'unknown', 'unknown', '-666666666', 'unknown', 'unknown', '36870', '56362', 'unknown', 'unknown', 'unknown', '43503', '37356', '56974', 'unknown', 'unknown', '45997', '73443', '40265', 'unknown', '70014', 'unknown', '35319', 'unknown', 'unknown', 'unknown', '246813', 'unknown', 'unknown', 'unknown']}\n"
     ]
    }
   ],
   "source": [
    "# lookup population and income of each zip code (ZCTA)\n",
    "# https://www.census.gov/data/developers/data-sets/acs-5year.html\n",
    "\n",
    "#create dictionary to hold results\n",
    "pop_inc_dict = {'zip':[], 'population':[], 'income':[]}\n",
    "\n",
    "for zip_ in zip_list: #looks like zip is a reserved word so use zip_\n",
    "\n",
    "    #lookup population Total Population = B01003_001E, income = B19013_001E, \n",
    "    url = 'https://api.census.gov/data/2018/acs/acs5?get=B01003_001E,B19013_001E&for=zip%20code%20tabulation%20area:'+zip_\n",
    "    page = requests.get(url, allow_redirects=False, timeout=10)\n",
    "    page = page.text #this returns a string in the form of a list\n",
    "    try:\n",
    "        info = ast.literal_eval(page) #this converts to a list type object\n",
    "    except SyntaxError:\n",
    "        info =[['pop', 'income', 'zip'],['unknown','unknown', zip_]]\n",
    "    \n",
    "    #from the list with population, income, and zip code\n",
    "    #add to the dictionary\n",
    "    a_=info[1][0] #isolates the population\n",
    "    b_=info[1][1] #isolate the income\n",
    "    c_=info[1][2] # isolate the zip\n",
    "    pop_inc_dict['population'].append(a_)\n",
    "    pop_inc_dict['income'].append(b_)\n",
    "    pop_inc_dict['zip'].append(c_)\n",
    "    \n",
    "print(pop_inc_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gather Physical Area of Each Zip Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'zip': ['77036', '77077', '60649', '10012', '77218', '77292', '60685', '60661', '60633', '60611', '77225', '33135', '10179', '77066', '10103', '10038', '60632', '77031', '33127', '33124', '77223', '77056', '10075', '77009', '10113', '60654', '77043', '77025', '10242', '60618', '10117', '33197', '10105', '77042', '10277', '77051', '77007', '60701', '77064', '10278', '33184', '10152', '10020', '10129', '10124', '10154', '77090', '60656', '10133', '33178', '77095', '33242', '77208', '77287', '77047', '77016', '77046', '77280', '77059', '60660', '10111', '10153', '33134', '10125', '77075', '60603', '77067', '33151', '10004', '77071', '10171', '10276', '77288', '10177', '77236', '77249', '33167', '77065', '77230', '77256', '60693', '77035', '77078', '77040', '10107', '10102', '60616', '60647', '60617', '77267', '33180', '10156', '33126', '33116', '33233', '77279', '10007', '77204', '60694', '33243'], 'area': ['7.1', '8.7', '3.9', '0.3', 'unknown', 'unknown', 'unknown', '0.2', '12.2', '1.4', 'unknown', '2.1', 'unknown', '8.6', '0.0', '0.2', '7.4', '3.1', '3.3', 'unknown', 'unknown', '3.4', '0.1', '6.1', 'unknown', '0.6', '14.9', '4.3', 'unknown', '5.0', 'unknown', 'unknown', 'unknown', '6.2', 'unknown', '7.3', '7.9', 'unknown', '14.8', '0.0', '2.6', '0.0', '0.0', 'unknown', 'unknown', '0.0', '8.2', '3.2', 'unknown', '63.6', '15.5', 'unknown', 'unknown', 'unknown', '14.1', '9.7', '0.1', 'unknown', '9.9', '1.5', '0.0', '0.0', '5.2', 'unknown', '11.2', '0.1', 'unknown', 'unknown', '0.5', '4.5', '0.0', 'unknown', 'unknown', '0.0', 'unknown', 'unknown', '4.3', '8.2', 'unknown', 'unknown', 'unknown', '5.7', '10.8', '14.1', 'unknown', 'unknown', '4.6', '4.0', '15.4', 'unknown', '3.9', 'unknown', '5.6', 'unknown', 'unknown', 'unknown', '0.1', 'unknown', 'unknown', 'unknown']}\n"
     ]
    }
   ],
   "source": [
    "# lookup area of each zip code\n",
    "\n",
    "#Wolfram Alpha credentials\n",
    "appid_wolfram='JQL3WY-6AXEU62W39'\n",
    "\n",
    "area_dict={'zip':[], 'area':[]}\n",
    "\n",
    "for zip_ in zip_list:\n",
    "        #wolfram query\n",
    "        url = 'http://api.wolframalpha.com/v1/result?appid={}&i=What+is+the+area+of+{}%3F&units=imperial'.format(\n",
    "            appid_wolfram, zip_)\n",
    "        page = requests.get(url, allow_redirects=False)\n",
    "        page = page.text\n",
    "        \n",
    "        #extract data, add to list\n",
    "        a_= re.search('\\d+\\.\\d', page)\n",
    "        try:\n",
    "            a_ = a_.group()\n",
    "        except AttributeError:\n",
    "            a_='unknown'\n",
    "        area_dict['zip'].append(zip_)\n",
    "        area_dict['area'].append(a_)\n",
    "        \n",
    "print(area_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gather Ice Cream Stores in Each Zip Code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# lookup ice cream shops\n",
    "\n",
    "# query foursquare for venues based on locations, where locations are specified by using \"near\" city name\n",
    "# query ice cream shop venue category = 4bf58dd8d48988d1c9941735\n",
    "# create dictionary to hold results: name, city, zip\n",
    "\n",
    "# define dictionary for results\n",
    "ice_dict = {'name':[], 'city':[], 'zip':[]}\n",
    "\n",
    "# define static parameters for foursquare API call\n",
    "client_id = 'TLYOVL14TKQ5PDL1XJ1QMVPXVNLDAAE3AW1DDLMEKLCOIG1S'\n",
    "client_secret = 'WDY0ZFANIRBK3L4NSE351M4FFSF43VUVUIU2L4ED3DZRETEW'\n",
    "version= 20160602\n",
    "radius = 3000 #meters\n",
    "limit = 50 #limited to 50 results in 4S free version\n",
    "categoryId = '4bf58dd8d48988d1c9941735'  #ice cream shop\n",
    "\n",
    "# loop through each zip\n",
    "for near in zip_list:\n",
    "    # for each city, pull the ice cream stores \n",
    "    url = 'https://api.foursquare.com/v2/venues/search?client_id={}&client_secret={}&near={}&radius={}&v={}&categoryId={}&limit={}'.format(client_id, client_secret, near, radius, version, categoryId, limit)\n",
    "\n",
    "    r = requests.get(url).json()[\"response\"]\n",
    "    #print(json.dumps(r,indent=4))\n",
    "    #venues = r['venues']\n",
    "    #venues_df = pd.json_normalize(venues)\n",
    "    \n",
    "    # extract from the json response the name, city, and zip of each ice cream store\n",
    "    # add those three values to the dictionary\n",
    "    i=0\n",
    "    for venues in r['venues']:\n",
    "        try:\n",
    "            a_ = r['venues'][i]['name']\n",
    "            ice_dict['name'].append(a_)\n",
    "        except KeyError:\n",
    "            ice_dict['name'].append('Unknown')\n",
    "        try:\n",
    "            b_ = r['venues'][i]['location']['postalCode']\n",
    "            ice_dict['zip'].append(b_)\n",
    "        except KeyError:\n",
    "            ice_dict['zip'].append('Unknown')\n",
    "        try:\n",
    "            c_ = r['venues'][i]['location']['city']\n",
    "            ice_dict['city'].append(c_)\n",
    "        except:\n",
    "            ice_dict['city'].append('Unknown')\n",
    "        i = i+1\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(json.dumps(r, indent=8, sort_keys=True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'name': ['Twistee Treat Bellaire', 'Baskin-Robbins', 'TCBY', 'Milk • Cream', 'Wsup Cafe', 'Gelato Cup', 'Bubble Egg', 'Popfancy Dessert Bar', 'Bing Su', 'Matcha Cafe Maiko', 'Bae Houston', 'Twisted Love', 'N-2 Ice Cream Cafe', 'Boba & Cream', 'The Yogurt Spot', 'Aqua S', 'Red Circle Ice Cream', \"Ritter's Frozen Custard\", 'Baskin-Robbins', 'Baskin-Robbins', 'Fruituzy', 'La Argentina Gelato & Coffee San Felipe', 'Carvel Ice Cream', 'Baskin-Robbins', 'Taurus Flavors', 'Paleteria El Potrillo', 'Van Leeuwen Ice Cream', 'KITH Treats', 'Eataly Kiosk', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Mikey Likes It Ice Cream', 'Van Leeuwen Ice Cream', 'Morgenstern’s Finest Ice Cream', 'Shake Shack', 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Amorino Gelato', 'COFFEE & CREAM by Oddfellows', 'Alphabet Scoop', 'Il Laboratorio del Gelato', 'Tipsy Scoop', 'Van Leeuwen Artisan Ice Cream', 'Fresco Gelateria', '16 Handles', \"Davey's Ice Cream\", 'Cones', 'The Original Chinatown Ice Cream Factory', 'Venchi', 'Sundaes and Cones', 'Van Leeuwen Artisan Ice Cream', 'Oddfellows Ice Cream Co.', 'Soft Swerve Ice Cream', 'Popbar', \"Morgenstern's Finest Ice Cream\", 'Stuffed Ice Cream', 'Taiyaki NYC', 'La Newyorkina', 'Gelateria', 'Milk & Cream Cereal Bar', 'Van Leeuwen Ice Cream', 'Ice & Vice', \"Ray's Candy Store\", 'Big Gay Ice Cream Shop', 'Melt Ice Cream Sandwiches', 'Big Gay Ice Cream Shop', 'Ample Hills Creamery', 'Grom', 'Gelato Giusto', \"Sam's Fried Ice Cream\", 'Wowfulls', \"M'o Gelato\", 'il Laboratorio del Gelato', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Jacques Torres Chocolate', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', 'Chocolate Wasted', 'Blue Bell Ice Cream', \"Shasta's Cones & More\", 'Scoops', 'Paleteria El Sabor De Michoacan', 'Baskin-Robbins', 'Baskin-Robbins', 'La Costeña Ice Cream Shop', 'Baskin-Robbins', \"Lindy's Chili & Gertie's Ice Cream\", 'Rainbow Ice Cream', 'La Flor De Mayo', 'La Michoacana', 'De Colores', 'La Michoacana', 'Baskin-Robbins', 'Sweet Home Gelato', 'KURIMU', 'Kilwins', 'Black Dog Gelato', 'Baskin-Robbins', 'DOVE Ice Cream Truck', 'Cold Stone Creamery', 'Insomnia cookies', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Park Cafe', 'Frost Gelato', \"Gordo's Homemade Ice Cream Bars\", 'Baskin-Robbins', 'Baskin-Robbins', 'Kurimo', 'Scoops Ice Cream', 'Whispers Gelato', 'Baskin-Robbins', 'Pretty Cool', 'Baskin-Robbins', 'Eataly Il Gelato', 'Bobtail Ice Cream & Coffee Co.', 'la michoacana', 'Baskin-Robbins', 'Star Fruit', 'Baskin-Robbins', \"Franco's at The Fountain\", 'Scooped Cookie Dough Bar', 'Kilwins Ice Cream', 'Wonderoll', 'Baskin-Robbins', 'Las 3 Campanitas', 'Skinny Piggy Bakery', 'Baskin-Robbins', \"Jove T's Ice Cream Shop\", 'Cold Stone Creamery', 'Baskin-Robbins', 'Cone Gourmet Ice Cream', 'Forever Yogurt - Gold Coast', \"Jeni's Splendid Ice Creams\", \"Mario's Italian Lemonade\", 'Happy National Ice Cream Day', 'Berry Chill', 'Tiny Hatt', 'Ghirardelli Ice Cream & Chocolate Shop', 'Paleteria Jamay', \"Richard's Ice Cream\", 'Ghirardelli Ice Cream & Chocolate Shop', 'Scooped Cookie Dough Bar', 'Sweet Home Gelato', 'Kilwins', 'The Original Rainbow Cone', 'Black Dog Gelato', 'Xurro', 'Cold Stone Creamery', 'Baskin-Robbins', 'Insomnia cookies', 'Baskin-Robbins', 'Baskin-Robbins', 'Frost Gelato', \"Gordo's Homemade Ice Cream Bars\", 'Park Cafe', 'Forever Yogurt - Gold Coast', 'Baskin-Robbins', 'Baskin-Robbins', \"Dippin' Dots\", 'Ice Cream Shoppe', 'Whispers Gelato', 'Baskin-Robbins', 'Baskin-Robbins', 'Bobtail Ice Cream & Coffee Co.', \"Franco's at The Fountain\", 'Baskin-Robbins', 'Baskin-Robbins', 'Kilwins Ice Cream', 'Eataly Il Gelato', 'Pretty Cool', 'Baskin-Robbins', 'Wonderoll', \"Ben & Jerry's\", 'Star Fruit', 'Baskin-Robbins', 'Baskin-Robbins', \"Jeni's Splendid Ice Creams\", 'Berry Chill', \"Jove T's Ice Cream Shop\", \"Jeni's Splendid Ice Creams\", 'Tiny Hatt', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", \"King's Cream\", 'Sweet Servings', 'Carvel Ice Cream', 'Tutti Frutti', 'Azucar at Marlins Park', 'Bassetts Ice Cream', \"Wall's Ice Cream at Magic City Casino\", 'Coco & Vainilla', 'Popsy Pops', 'Dairy Queen', 'Azucar Ice Cream Company', 'Erasmos Ice Cream', 'Burger Museum by Burger Beast', 'Carvel', 'Shake Shack', '16 Handles', \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Grom', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', 'Milk Bar UWS', 'Sedutto', \"Ben & Jerry's\", '16 Handles', '16 Handles', '16 Handles', 'The Sweet Shop NYC', 'Screme Gelato Bar', \"Ben & Jerry's\", 'BurgerFi', \"Ben & Jerry's\", 'Shake Shack', 'O O Wonder', 'Grom', 'Pinkberry', 'Cool Mess', 'Pinkberry', 'Holey Cream', 'Häagen-Dazs', 'UES.', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Dairy Queen', 'Paleteria Arcoiris: De Venta Al Menudeo Y Mayoreo', 'El Kiosko #1', 'Baskin-Robbins', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Lollino', 'Coolhaus Ice Cream Truck', \"Ben & Jerry's\", 'Eataly Kiosk', 'Grom', 'Melt Ice Cream Sandwiches', 'Mia Chef Gelateria', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Shake Shack', \"Emack & Bolio's Ice Cream\", \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', '16 Handles', 'Amorino', 'Amorino', 'Shake Shack', \"Ralph's Famous Italian Ices\", 'Pinkberry', 'Tipsy Scoop', 'Van Leeuwen Ice Cream', '16 Handles', 'Venchi', 'Shake Shack', '16 Handles', '16 Handles', 'Gelateria', 'Sedutto', 'The Sweet Shop NYC', 'Tasti D-Lite', '16 Handles', 'BurgerFi', 'Pinkberry', 'Momofuku Milk Bar', 'Shake Shack', 'Pinkberry', 'Grom', 'Van Leeuwen Ice Cream', 'Holey Cream', 'Gelato Giusto', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Polosud', 'Big Gay Ice Cream', 'Mikey Likes It Ice Cream', 'Van Leeuwen Ice Cream', 'Van Leeuwen Ice Cream', 'Van Leeuwen Ice Cream', 'Alphabet Scoop', 'COFFEE & CREAM by Oddfellows', 'Amorino Gelato', 'Van Leeuwen Ice Cream', 'Il Laboratorio del Gelato', 'Brooklyn Farmacy & Soda Fountain', \"Morgenstern's Finest Ice Cream\", 'Stuffed Ice Cream', 'Soft Swerve Ice Cream', 'Oddfellows Ice Cream Co.', 'New Territories', 'Shake Shack', 'Sundaes and Cones', 'Van Leeuwen Artisan Ice Cream', 'Popbar', \"Davey's Ice Cream\", 'Cones', 'Taiyaki NYC', 'Fresco Gelateria', 'KITH Treats', 'The Original Chinatown Ice Cream Factory', 'La Newyorkina', \"Ray's Candy Store\", 'Culture An American Yogurt Company', 'OddFellows Ice Cream - The Sandwich Shop', \"Emack & Bolio's\", 'Milk & Cream Cereal Bar', 'Van Leeuwen Ice Cream', 'Ice & Vice', 'Big Gay Ice Cream Shop', \"Sam's Fried Ice Cream\", 'Grom', 'Big Gay Ice Cream Shop', 'Insomnia Cookies', 'Wowfulls', \"M'o Gelato\", 'il Laboratorio del Gelato', 'Ample Hills Creamery', 'Morgenstern’s Finest Ice Cream', 'Il Gelato @ Eataly', 'Melt Bakery', 'Jacques Torres Chocolate', 'La Michoacana', 'Baskin-Robbins', \"Lindy's Chili & Gertie's Ice Cream\", 'Baskin-Robbins', 'La Costeña Ice Cream Shop', 'Café y Nevería Juarez', 'Midway Ice Cream', 'Tastee Freeze', 'Los Mangos', 'La Flor De Mayo', 'Paleteria El Sabor De Michoacan', 'La Michocana', 'LOS MANGOS', 'La Michoacana', 'Razpachos Neveria', 'De Colores', \"Betty's Ice Cream\", 'Dairy Queen', 'MadLab Creamery', \"Lulu's Nitrogen Ice Cream\", 'Morelia Gourmet Paletas', 'mr kream ice cream shop', 'latteria', 'Cielito Artisan Pops', 'Feverish Pops Gourmet', 'Feverishpops', 'Coco Gelato', 'Nabati Ice Cream', 'Aubi & Ramsa Ice Cream Co', 'Dasher and Crank', 'Midtown Creamery', 'Stefano Versace Gelato', 'Taiyaki NYC - Miami', 'Carvel', 'Mr. Bing', 'Bertoni Gelato', 'Bianco Gelato Organic Treats', 'Bellamia Wynwood', 'Baskin-Robbins', 'Amazonica', 'serendipity creamery', 'Flavian', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', 'Creamistry', 'Marble Slab Creamery', 'Nu Ice & Drinks', 'Amorino', 'Cafe Dolce Gelato', 'Baskin-Robbins', '8•Fahrenheit', 'Popfancy', 'Booza', '16 Handles', 'Sedutto', 'BurgerFi', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Baskin-Robbins', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Tasti D-Lite', 'Baskin-Robbins', 'Grom', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Jacques Torres Ice Cream Shop', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Amorino', 'Shake Shack', 'Pinkberry', 'Shake Shack', 'Van Leeuwen Ice Cream', '16 Handles', 'The Sweet Shop NYC', 'Screme Gelato Bar', 'Milk Bar UWS', '16 Handles', 'O O Wonder', 'Grom', 'Tasti D-Lite', 'Cool Mess', 'Pinkberry', 'Holey Cream', 'UES.', 'Red Mango', 'Red Mango', 'A La Mode Shoppe', \"L'Arte Del Gelato\", 'Screme Espresso Bar', 'Uptown Swirl', 'Häagen-Dazs', 'Red Mango', \"Ben & Jerry's\", 'Tampico Refresqueria', 'El Bolillo Bakery', 'Marble Slab Creamery', 'Mango Beach', \"Rita's Italian Ice & Frozen Custard\", 'Texas Blizzard', 'Dolce Neve', 'Yeti Sunshine', 'Tropical Ice Cream', \"Rita's Ice Custard Happiness\", 'Awesome Bites', 'Shake Shack', '16 Handles', \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Grom', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', \"Ben & Jerry's\", 'BurgerFi', 'Sedutto', '16 Handles', 'Milk Bar UWS', 'Screme Gelato Bar', \"Ben & Jerry's\", 'The Sweet Shop NYC', \"Ben & Jerry's\", '16 Handles', '16 Handles', 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'Häagen-Dazs', 'UES.', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Sweet Home Gelato', 'KURIMU', 'Kilwins', 'The Original Rainbow Cone', 'Black Dog Gelato', 'Cold Stone Creamery', 'Xurro', \"Vinny D's\", 'Insomnia cookies', 'Baskin-Robbins', \"Gordo's Homemade Ice Cream Bars\", 'Baskin-Robbins', 'Frost Gelato', 'Baskin-Robbins', 'Park Cafe', 'Baskin-Robbins', 'Coco Rolled Ice Cream', 'Kurimo', \"Dippin' Dots\", 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Kilwins Ice Cream', 'Star Fruit', 'Wonderoll', 'Bobtail Ice Cream & Coffee Co.', 'Baskin-Robbins', 'Conniption', \"Franco's at The Fountain\", 'Pretty Cool', 'Baskin-Robbins', 'Baskin-Robbins', \"Ben & Jerry's\", 'Baskin-Robbins', 'Eataly Il Gelato', 'Scooped Cookie Dough Bar', 'Baskin-Robbins', \"Jove T's Ice Cream Shop\", 'Baskin-Robbins', 'Tiny Hatt', 'Cone Gourmet Ice Cream', 'Baskin-Robbins', 'Forever Yogurt - Gold Coast', \"Mario's Italian Lemonade\", \"Jeni's Splendid Ice Creams\", 'Happy National Ice Cream Day', 'Berry Chill', \"Jeni's Splendid Ice Creams\", 'Ghirardelli Ice Cream & Chocolate Shop', 'Baskin-Robbins', 'Fellini Gelato & Caffè', 'La Moreliana Natural Ice Cream', 'Tamarindo', 'Mr. Natural', 'Ay Jalisco Paleteria Y Neveria', \"Hank's Ice Cream\", 'Marble Slab Creamery', 'Marble Slab Creamery', 'TCBY', 'Flower & Cream', 'Tutti Frutti', \"Kegg's Candies\", 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Coolhaus Ice Cream Truck', 'Grom', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Shake Shack', 'Van Leeuwen Ice Cream', \"Ben & Jerry's\", '16 Handles', \"Ben & Jerry's\", 'Screme Gelato Bar', 'The Sweet Shop NYC', 'Sedutto', \"Ben & Jerry's\", '16 Handles', 'Milk Bar UWS', '16 Handles', 'BurgerFi', 'Shake Shack', 'O O Wonder', 'Grom', 'Pinkberry', 'Cool Mess', 'Pinkberry', 'Holey Cream', 'UES.', 'Häagen-Dazs', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Baskin-Robbins', \"Scooter's Frozen Custard\", 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Black Dog Gelato', 'Baskin-Robbins', 'Baskin-Robbins', \"Miko's Italian Ice\", \"Margie's Candies\", 'Paleteria Y Neveria Tamarindo Loco', 'la Michoacana Premium', 'Fruityland Ice Cream', 'Alaska Paleteria Y Neveria', 'Arco Iris', 'La Michoacana', 'Fruit Paradise', 'Ice Q', 'Milk & Wood', 'Pretty Cool Ice Cream', 'San Luis Freeze Icecream Truck', 'Baskin-Robbins', 'Paletas La Plaza', 'Monarca Palateria', \"Mario & Gino's Restaurant\", 'Coldstone', 'Shake Shack', '16 Handles', \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Grom', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', \"Ben & Jerry's\", 'The Sweet Shop NYC', 'Sedutto', 'Screme Gelato Bar', \"Ben & Jerry's\", 'Milk Bar UWS', '16 Handles', '16 Handles', \"Ben & Jerry's\", 'BurgerFi', '16 Handles', 'Shake Shack', 'O O Wonder', 'Grom', 'Pinkberry', 'Cool Mess', 'Pinkberry', 'Holey Cream', 'Häagen-Dazs', 'UES.', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Lollino', 'Coolhaus Ice Cream Truck', 'Eataly Kiosk', \"Ben & Jerry's\", 'Mia Chef Gelateria', 'Melt Ice Cream Sandwiches', 'Grom', 'Grace Street Cafe', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Grom', 'Amorino', 'Amorino', 'Shake Shack', \"Ralph's Famous Italian Ices\", '16 Handles', 'Venchi', 'Shake Shack', 'Van Leeuwen Ice Cream', 'Tipsy Scoop', '16 Handles', '16 Handles', 'The Sweet Shop NYC', 'Momofuku Milk Bar', 'BurgerFi', 'Tasti D-Lite', 'Gelateria', 'Pinkberry', 'Milk Bar UWS', '16 Handles', 'Sedutto', 'Shake Shack', 'Pinkberry', 'Van Leeuwen Ice Cream', 'Holey Cream', 'Gelato Giusto', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Dairy Queen', 'Baskin-Robbins', 'Red Mango', 'Marble Slab Creamery', 'La Argentina Gelato & Coffee San Felipe', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Grom', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Amorino', 'Amorino', 'Shake Shack', 'Van Leeuwen Ice Cream', '16 Handles', \"Ben & Jerry's\", \"Ben & Jerry's\", 'Screme Gelato Bar', 'The Sweet Shop NYC', '16 Handles', \"Ben & Jerry's\", 'Sedutto', 'Milk Bar UWS', 'BurgerFi', '16 Handles', 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'UES.', 'Häagen-Dazs', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Aqua S', 'Mango Beach', 'Marble Slab Creamery', 'Marble Slab Creamery', \"Rita's Italian Ice & Frozen Custard\", 'Gelazzi', 'Yeti Sunshine', \"Rita's Ice Custard Happiness\", 'Earthcraft Juicery', 'Cloud 10 Creamery', 'La Gelateria', 'Awesome Bites', 'Paleteria El Sabor De Michoacan', 'Baskin-Robbins', 'La Costeña Ice Cream Shop', 'Baskin-Robbins', 'Baskin-Robbins', \"Lindy's Chili & Gertie's Ice Cream\", 'Rainbow Ice Cream', 'La Flor De Mayo', 'La Michoacana', 'La Michoacana', 'De Colores', 'Twistee Treat Jones', 'Baskin-Robbins', \"Rita's Ice Custard Heaven\", 'Petatlan Natural Fruit Ice Cream', 'Marble Slab Creamery', 'Chaman ice cream and juice', 'The Original Chinatown Ice Cream Factory', 'Polosud', 'Taiyaki NYC', 'Mikey Likes It Ice Cream', 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Ice Cream', 'COFFEE & CREAM by Oddfellows', 'Amorino Gelato', 'Alphabet Scoop', 'Il Laboratorio del Gelato', 'Ample Hills Creamery', 'Van Leeuwen Artisan Ice Cream', 'Cones', 'Oddfellows Ice Cream Co.', 'Shake Shack', \"Morgenstern's Finest Ice Cream\", 'Venchi', 'Soft Swerve Ice Cream', 'Fresco Gelateria', 'Van Leeuwen Artisan Ice Cream', 'KITH Treats', \"Davey's Ice Cream\", 'Popbar', 'Stuffed Ice Cream', 'Sundaes and Cones', 'La Newyorkina', \"Emack & Bolio's\", 'Van Leeuwen Ice Cream', 'Milk & Cream Cereal Bar', \"Ray's Candy Store\", 'OddFellows Ice Cream - The Sandwich Shop', 'Ice & Vice', 'Big Gay Ice Cream Shop', 'Grom', 'Big Gay Ice Cream Shop', 'Ample Hills Creamery', 'Insomnia Cookies', \"Sam's Fried Ice Cream\", 'Wowfulls', 'Ample Hills Creamery', \"M'o Gelato\", 'il Laboratorio del Gelato', 'Ample Hills Creamery', 'Morgenstern’s Finest Ice Cream', 'Il Gelato @ Eataly', 'Melt Bakery', 'Jacques Torres Chocolate', 'Carvel Ice Cream', 'Cold Stone Creamery', 'Pinkberry', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Lollino', 'Coolhaus Ice Cream Truck', 'Eataly Kiosk', 'Grom', 'Mia Chef Gelateria', 'Melt Ice Cream Sandwiches', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Shake Shack', \"Emack and Bolio's Ice Cream\", \"Emack & Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', \"Ben & Jerry's\", 'Shake Shack', \"Ralph's Famous Italian Ices\", 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', 'Venchi', '16 Handles', 'Pinkberry', 'Tipsy Scoop', '16 Handles', 'Sedutto', 'Brooklyn Ice Cream Factory - Greenpoint', 'The Sweet Shop NYC', 'Pinkberry', 'BurgerFi', 'Gelateria', 'Tasti D-Lite', '16 Handles', 'Momofuku Milk Bar', '16 Handles', 'Shake Shack', 'Grom', 'Van Leeuwen Ice Cream', 'Holey Cream', 'Gelato Giusto', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Amorino Gelato', 'Van Leeuwen Ice Cream', 'Bucket & Bay Craft Gelato', 'il Laboratorio del Gelato', 'Melt Ice Cream Sandwiches', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Mikey Likes It Ice Cream', 'Van Leeuwen Ice Cream', 'Shake Shack', 'Caffè Panna', 'COFFEE & CREAM by Oddfellows', 'Alphabet Scoop', 'Van Leeuwen Ice Cream', 'Amorino', 'Il Laboratorio del Gelato', 'KITH Treats', 'Sundaes and Cones', 'Van Leeuwen Artisan Ice Cream', \"Davey's Ice Cream\", 'La Newyorkina', '16 Handles', 'Fresco Gelateria', \"Morgenstern's Finest Ice Cream\", 'The Original Chinatown Ice Cream Factory', 'Cones', 'Tipsy Scoop', 'Stuffed Ice Cream', 'Soft Swerve Ice Cream', 'Taiyaki NYC', 'Venchi', '16 Handles', 'Popbar', 'Gelateria', 'Milk & Cream Cereal Bar', 'Van Leeuwen Ice Cream', 'Ice & Vice', \"Ray's Candy Store\", 'Shake Shack', 'Big Gay Ice Cream Shop', 'Big Gay Ice Cream Shop', 'Ample Hills Creamery', 'Van Leeuwen Ice Cream', 'Grom', 'Wowfulls', 'Gelato Giusto', \"Sam's Fried Ice Cream\", \"M'o Gelato\", 'Ample Hills Creamery', 'Morgenstern’s Finest Ice Cream', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Grom', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', '16 Handles', \"Ben & Jerry's\", 'Milk Bar UWS', '16 Handles', 'Screme Gelato Bar', 'Sedutto', \"Ben & Jerry's\", \"Ben & Jerry's\", '16 Handles', 'The Sweet Shop NYC', 'BurgerFi', 'Shake Shack', 'O O Wonder', 'Grom', 'Pinkberry', 'Cool Mess', 'Pinkberry', 'Holey Cream', 'Häagen-Dazs', 'UES.', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Grom', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Baskin-Robbins', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', '16 Handles', \"Ben & Jerry's\", 'BurgerFi', 'Milk Bar UWS', 'Screme Gelato Bar', \"Ben & Jerry's\", '16 Handles', \"Ben & Jerry's\", '16 Handles', 'Sedutto', 'The Sweet Shop NYC', 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'Häagen-Dazs', 'UES.', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Lollino', 'Coolhaus Ice Cream Truck', \"Ben & Jerry's\", 'Eataly Kiosk', 'Mia Chef Gelateria', 'Melt Ice Cream Sandwiches', 'Grom', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Shake Shack', \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", '16 Handles', 'Shake Shack', 'Amorino', \"Ralph's Famous Italian Ices\", 'Amorino', 'Shake Shack', 'Tipsy Scoop', '16 Handles', 'Pinkberry', '16 Handles', 'Van Leeuwen Ice Cream', 'Venchi', '16 Handles', 'The Sweet Shop NYC', 'Brooklyn Ice Cream Factory - Greenpoint', '16 Handles', 'Gelateria', 'Momofuku Milk Bar', 'BurgerFi', 'Tasti D-Lite', 'Pinkberry', 'Sedutto', 'Shake Shack', 'Grom', 'Van Leeuwen Ice Cream', 'Gelato Giusto', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Marleny Refresqueria', 'Cold Stone Creamery', 'El Pibe', 'Haagen-Dazs', 'Baskin-Robbins', 'Baskin-Robbins', \"Ben & Jerry's\", 'Baskin-Robbins', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Grom', 'Coolhaus Ice Cream Truck', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Shake Shack', 'Van Leeuwen Ice Cream', 'The Sweet Shop NYC', 'BurgerFi', \"Ben & Jerry's\", '16 Handles', 'Sedutto', '16 Handles', '16 Handles', \"Ben & Jerry's\", \"Ben & Jerry's\", 'Milk Bar UWS', 'Screme Gelato Bar', 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'Häagen-Dazs', 'UES.', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Cream', 'Cold Stone Creamery', 'Snow Kool', 'Freddo', 'Fresh Berry', \"Sloan's\", \"Rico's Ice Cream & Coffee\", '4D Gelateria', 'Brain Freeze Nitrogen Ice Cream & Yogurt Lab', 'Baskin Robbins 31 Flavors', 'Ice Valley', 'Marble Slab Creamery', \"Bahama Buck's\", 'TCBY', \"Menchie's\", \"Kim's Creamery\", 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', 'Cold Stone Creamerey', 'Mico’s Ice Cream', 'The Chocolate Bar', 'Amorino', 'Baskin-Robbins', 'Marble Slab Creamery', 'Cloud 10 Creamery', 'Milk And Sugar', 'Steel City Pops', '8•Fahrenheit', 'Smoosh Cookie Sandwiches', 'Dolce Bacio Cafe', 'Cloud 10 Creamery', \"Amy's Ice Creams\", \"Tiny's Milk and Cookies\", 'Baskin-Robbins', \"Oscar's Creamery\", \"Ben & Jerry's\", 'Berripop', 'The Tipsy Dessert Bar', 'TCBY', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", \"Menchie's\", 'Baskin-Robbins', 'TCBY', 'Lickity Split', 'FRIO Gelato', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Icylicious Ice Cream Rolls', 'Baskin-Robbins', 'La Mariposa Michoacana Corp.', 'Ice Station', 'Paleteria Las Delicias de Michoacana', \"George's Ice Cream & Sweets\", 'A Taste of Heaven', 'Baskin-Robbins', 'Monarca', \"Palazzolo's Artisan Gelato & Sorbetto\", \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Lollino', 'Coolhaus Ice Cream Truck', \"Ben & Jerry's\", 'Eataly Kiosk', 'Grom', 'Melt Ice Cream Sandwiches', 'Mia Chef Gelateria', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Caffè Panna', 'Shake Shack', 'Pinkberry', '16 Handles', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', \"Emack and Bolio's Ice Cream\", \"Ralph's Famous Italian Ices\", 'Shake Shack', 'Amorino', 'Amorino', '16 Handles', '16 Handles', 'Venchi', 'Van Leeuwen Ice Cream', 'Tipsy Scoop', 'Shake Shack', 'BurgerFi', 'Gelateria', 'Pinkberry', 'The Sweet Shop NYC', 'Sedutto', 'Tasti D-Lite', '16 Handles', 'Momofuku Milk Bar', '16 Handles', 'Shake Shack', 'Pinkberry', 'Grom', 'Van Leeuwen Ice Cream', 'Gelato Giusto', 'Melt Ice Cream Sandwiches', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Coolhaus Ice Cream Truck', 'Eataly Kiosk', 'Mia Chef Gelateria', 'Grom', 'Melt Ice Cream Sandwiches', 'Ice & Vice', 'Jacques Torres Ice Cream Shop', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Shake Shack', 'Van Leeuwen Ice Cream Truck - 6th', '16 Handles', \"Emack & Bolio's Ice Cream\", \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Grom', 'Amorino', 'Shake Shack', 'Amorino', 'Van Leeuwen Ice Cream', '16 Handles', 'Tipsy Scoop', 'Shake Shack', 'BurgerFi', 'Sedutto', 'Gelateria', 'Something Sweet', '16 Handles', 'Pinkberry', \"Ben & Jerry's\", 'Milk Bar UWS', '16 Handles', 'Tasti D-Lite', 'The Sweet Shop NYC', 'Itizy Ice Cream Truck', 'Shake Shack', 'Pinkberry', 'Shake Shack', 'Van Leeuwen Ice Cream', 'Holey Cream', 'UES.', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Tio Colo Bocaditos De Helado', \"Ben & Jerry's\", 'Morelia Gourmet Paletas', 'VIXI Gelateria', 'Carvel Ice Cream', 'Coldstone on the Mile', 'Häagen-Dazs', 'Miami Coppelia ice cream', 'Häagen-Dazs', \"Wall's Ice Cream at Magic City Casino\", 'Copelia', 'Burger Museum by Burger Beast', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Grom', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', \"Emack & Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', 'Milk Bar UWS', '16 Handles', 'Sedutto', 'BurgerFi', '16 Handles', 'The Sweet Shop NYC', \"Ben & Jerry's\", \"Ben & Jerry's\", \"Ben & Jerry's\", '16 Handles', 'Screme Gelato Bar', 'Shake Shack', 'O O Wonder', 'Grom', 'Pinkberry', 'Cool Mess', 'Pinkberry', 'Holey Cream', 'UES.', 'Häagen-Dazs', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Refresqueria Puerto Escondido', 'One Stop  Cravings', 'La Nueva Michoacana', 'Dairy Queen', 'Andy Ice Cream', 'Kilwins', 'Baskin-Robbins', 'Sweet Home Gelato', 'KURIMU', 'The Original Rainbow Cone', 'Black Dog Gelato', 'Baskin-Robbins', 'Xurro', 'Cold Stone Creamery', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', \"Gordo's Homemade Ice Cream Bars\", 'Frost Gelato', 'Park Cafe', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Scoops Ice Cream', 'Kurimo', \"Dippin' Dots\", 'Whispers Gelato', 'Bobtail Ice Cream & Coffee Co.', \"Ben & Jerry's\", 'Baskin-Robbins', 'Kilwins Ice Cream', 'Star Fruit', 'Baskin-Robbins', 'Eataly Il Gelato', \"Franco's at The Fountain\", 'Baskin-Robbins', 'Wonderoll', 'Scooped Cookie Dough Bar', 'Pretty Cool', 'la michoacana', 'Baskin-Robbins', 'Skinny Piggy Bakery', \"Jove T's Ice Cream Shop\", 'Baskin-Robbins', 'Cold Stone Creamery', 'Baskin-Robbins', 'Cone Gourmet Ice Cream', 'Forever Yogurt - Gold Coast', 'JoyYee Plus Shabu Shabu', \"Mario's Italian Lemonade\", \"Jeni's Splendid Ice Creams\", 'Berry Chill', 'Happy National Ice Cream Day', 'Tiny Hatt', 'Ghirardelli Ice Cream & Chocolate Shop', 'Dairy Queen', 'Paleteria Arcoiris: De Venta Al Menudeo Y Mayoreo', 'El Kiosko #1', 'Aubi & Ramsa Ice Cream Co', 'MadLab Creamery', 'F27 Nitrogen Ice Cream', 'Amazonica', 'Baskin-Robbins', 'Bianco', 'Häagen-Dazs', 'Dolce Brooklyn', 'Häagen-Dazs', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Red Mango', 'Big Gay Ice Cream', 'Blossom Ice Cream', 'Carvel Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Oddfellows Ice Cream Co.', 'Brooklyn Farmacy & Soda Fountain', 'Bucket & Bay Craft Gelato Co', \"Emack & Bolio's\", 'Minus10 Ice Cream', 'Grom', 'Yogurt In Love', 'Ample Hills Creamery', 'Oddfellows Ice cream', 'Jacques Torres Ice Cream Shop', 'Carvel Ice Cream', 'Baskin-Robbins', 'Cherry-Pick', 'Momofuku Milk Bar', 'Scoops on Cedar', 'Espresso Me', 'Jacques Torres Chocolate', 'Mister Softee Truck', 'Apothecary', 'Baskin-Robbins', 'Alchemy Creamery', 'Ice Cream Shoppe', 'Mr. Softee Ice Cream Truck', 'Häagen-Dazs', 'Wowfulls', 'Baskin-Robbins', \"Luigi's Ice Cream\", 'Blue Marble Ice Cream', 'Whitehall Pretzel & Ice Cream', 'Baskin-Robbins', 'Il Gelato @ Eataly', 'Blue Marble Ice Cream on Hudson', 'Karo Ice Cream Wholesale', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', 'Lollino', 'Coolhaus Ice Cream Truck', 'Eataly Kiosk', 'Grom', 'Melt Ice Cream Sandwiches', 'Mia Chef Gelateria', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', \"Ben & Jerry's\", 'Caffè Panna', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Pinkberry', 'Shake Shack', \"Ralph's Famous Italian Ices\", 'Amorino', 'Tipsy Scoop', '16 Handles', '16 Handles', 'Pinkberry', 'Venchi', 'Pinkberry', 'Tasti D-Lite', 'BurgerFi', '16 Handles', 'Sedutto', '16 Handles', 'Gelateria', 'Momofuku Milk Bar', 'The Sweet Shop NYC', 'Brooklyn Ice Cream Factory - Greenpoint', 'Pinkberry', 'Shake Shack', 'Grom', 'Van Leeuwen Ice Cream', 'Holey Cream', 'Gelato Giusto', 'Melt Ice Cream Sandwiches', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Shake Shack', '16 Handles', \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Grom', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Shake Shack', 'Van Leeuwen Ice Cream', \"Ben & Jerry's\", \"Ben & Jerry's\", '16 Handles', 'The Sweet Shop NYC', '16 Handles', 'BurgerFi', \"Ben & Jerry's\", 'Screme Gelato Bar', '16 Handles', 'Sedutto', 'Milk Bar UWS', 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'UES.', 'Häagen-Dazs', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', \"Ben & Jerry's\", 'Van Leeuwen Ice Cream', 'Van Leeuwen Artisan Ice Cream', \"Ben & Jerry's\", 'Lollino', 'Coolhaus Ice Cream Truck', 'Eataly Kiosk', 'Melt Ice Cream Sandwiches', 'Grom', 'Mia Chef Gelateria', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Mikey Likes It Ice Cream', 'Caffè Panna', 'Shake Shack', 'Pinkberry', \"Emack & Bolio's Ice Cream\", '16 Handles', 'Amorino Gelato', \"Ralph's Famous Italian Ices\", 'Amorino', 'Shake Shack', '16 Handles', 'Tipsy Scoop', '16 Handles', 'Sundaes and Cones', 'Venchi', '16 Handles', 'Momofuku Milk Bar', 'Tasti D-Lite', 'Gelateria', 'Pinkberry', '16 Handles', 'The Sweet Shop NYC', 'Sedutto', 'BurgerFi', 'Shake Shack', 'Grom', \"L'Arte del Gelato\", 'Van Leeuwen Ice Cream', 'Insomnia Cookies', 'Melt Ice Cream Sandwiches', 'Gelato Giusto', 'Pinkberry', 'il Laboratorio del Gelato', 'Ample Hills Creamery', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', 'Baskin-Robbins', 'Dairy Queen', 'Baskin-Robbins', 'Chaman ice cream and juice', 'La Michoacana Autentica', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", 'Homers Ice Cream', \"Homer's\", \"Love's Yogurt\", 'La Monarca Michoacana', 'Karo Ice Cream Wholesale', 'Dairy Queen', 'Marble Slab Creamery', 'Grom', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', \"Ben & Jerry's\", 'Lollino', 'Coolhaus Ice Cream Truck', 'Eataly Kiosk', 'Grom', 'Melt Ice Cream Sandwiches', 'Mia Chef Gelateria', 'Grace Street Cafe', 'Van Leeuwen Ice Cream', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Shake Shack', '16 Handles', 'Van Leeuwen Ice Cream', '16 Handles', 'Shake Shack', 'Tipsy Scoop', 'Milk Bar UWS', 'Sedutto', 'Tasti D-Lite', 'Pinkberry', \"Ben & Jerry's\", 'BurgerFi', 'Momofuku Milk Bar', '16 Handles', \"Ben & Jerry's\", '16 Handles', 'The Sweet Shop NYC', 'Gelateria', 'Shake Shack', 'Shake Shack', 'Van Leeuwen Ice Cream', 'Gelato Giusto', 'Itizy Ice Cream Truck', 'Pinkberry', 'Holey Cream', 'Ample Hills Creamery', 'Kaylee’s Creamery', 'A La Mode Shoppe', 'Häagen-Dazs', 'Pinkberry', 'Shake Shack', \"Emack and Bolio's Ice Cream\", '16 Handles', 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Grom', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Shake Shack', 'Van Leeuwen Ice Cream', \"Ben & Jerry's\", 'The Sweet Shop NYC', 'Sedutto', \"Ben & Jerry's\", 'Milk Bar UWS', 'BurgerFi', 'Screme Gelato Bar', '16 Handles', '16 Handles', '16 Handles', \"Ben & Jerry's\", 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'UES.', 'Häagen-Dazs', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Sugar Shack', 'Pizza Fried Chicken Ice Cream', 'Icy Honey', 'Ice Max', 'Baskin-Robbins', 'Baskin-Robbins', 'Cold Stone Creamery', 'DOVE Ice Cream Truck', 'Baskin-Robbins', 'Ice Point', 'Las 3 Campanitas', \"Culver's\", 'Baskin-Robbins', 'JoyYee Plus Shabu Shabu', \"Miko's Italian Ice\", 'Buzzed Bull Creamery - Wicker Park, IL', 'Angie’s Italaian Ice', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', \"Menchie's\", 'Baskin-Robbins', \"Joey G's Mac N' Cheese\", 'Black Dog Gelato', 'Baskin-Robbins', \"Jeni's Splendid Ice Creams\", 'Caffe Gelato', \"Miko's Italian Ice\", 'Baskin-Robbins', 'Paleteria Y Neveria Tamarindo Loco', \"Ruth & Phil's Gourmet Ice Cream\", 'La Michoacana', 'The Scoop Neveria', 'Ice Q', 'Baskin-Robbins', 'Arco Iris', 'Paleteria Y Neveria Tamarindo Loco', 'Xocoatl Churros', 'Milk & Wood', 'Tastee Freez', \"Scoop's\", 'San Luis Freeze Icecream Truck', \"Margie's Candies\", 'Baskin-Robbins', 'Fruit Paradise', 'Baskin Robins', 'Pretty Cool Ice Cream', 'Baskin-Robbins', 'Taurus Flavors', 'Baskin-Robbins', 'La Original Michoacana', 'tastee freez', 'Paleteria El Potrillo', 'La Michoacana', 'Baskin-Robbins', 'Neveria Lluvia', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", 'Ample Hills Creamery', 'BurgerFi', 'Chill-N Ice Cream', 'Dolce Vita Gelato Cafe Sunny Isles', 'Haagen Dazs', 'Kilwins', \"d'lites emporium\", 'Banana Royale', 'Cream', '(CREAM)', 'Tutti Frutti', 'Yogurt  Land', 'Haagen-Dazs® Ice Cream Shop', \"Menchie's\", 'Cold Stone Creamery', '4D Gelateria', 'Shake Shack', '16 Handles', \"Emack and Bolio's Ice Cream\", 'Van Leeuwen Ice Cream', 'Pinkberry', 'Van Leeuwen Artisan Ice Cream', 'Baskin-Robbins', 'Baskin-Robbins', 'Baskin-Robbins', 'Häagen-Dazs', 'I Scream Popup', 'Baskin-Robbins', 'Baskin-Robbins', 'Coolhaus Ice Cream Truck', 'Grom', 'Baskin-Robbins', 'Baskin-Robbins', 'Van Leeuwen Ice Cream', \"Emack & Bolio's Ice Cream\", 'Amorino', 'Amorino', 'Van Leeuwen Ice Cream', 'Shake Shack', 'Screme Gelato Bar', 'Milk Bar UWS', 'The Sweet Shop NYC', '16 Handles', 'BurgerFi', \"Ben & Jerry's\", \"Ben & Jerry's\", \"Ben & Jerry's\", '16 Handles', 'Sedutto', '16 Handles', 'Shake Shack', 'O O Wonder', 'Grom', 'Cool Mess', 'Pinkberry', 'Pinkberry', 'Holey Cream', 'UES.', 'Häagen-Dazs', 'Red Mango', 'Red Mango', 'Ample Hills Creamery', 'A La Mode Shoppe', 'Pinkberry', 'Red Mango', \"Ben & Jerry's\", 'Miami Coppelia ice cream', 'Häagen-Dazs', 'Tio Colo Bocaditos De Helado', 'Copelia', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', 'Sweet Cup Gelato & Sorbet', \"Shepherd's Ice Cream\", 'Grom', 'Il Gelato @ Eataly', 'Polosud', 'Mikey Likes It Ice Cream', 'Van Leeuwen Ice Cream', 'Van Leeuwen Ice Cream', 'COFFEE & CREAM by Oddfellows', 'Amorino Gelato', 'Alphabet Scoop', 'Pinkberry', 'Van Leeuwen Ice Cream', 'Ample Hills Creamery', 'Il Laboratorio del Gelato', 'La Newyorkina', \"Morgenstern's Finest Ice Cream\", 'Van Leeuwen Artisan Ice Cream', 'Oddfellows Ice Cream Co.', 'KITH Treats', \"Davey's Ice Cream\", 'Taiyaki NYC', 'Big Gay Ice Cream', 'Sundaes and Cones', 'Soft Swerve Ice Cream', 'Stuffed Ice Cream', 'Cones', 'Popbar', 'Fresco Gelateria', 'Van Leeuwen Artisan Ice Cream', 'Venchi', 'The Original Chinatown Ice Cream Factory', 'Shake Shack', 'Van Leeuwen Ice Cream', 'Milk & Cream Cereal Bar', \"Ray's Candy Store\", 'Bucket & Bay Craft Gelato Co', 'Ice & Vice', 'OddFellows Ice Cream - The Sandwich Shop', \"Emack & Bolio's\", 'Big Gay Ice Cream Shop', 'Ample Hills Creamery', 'Big Gay Ice Cream Shop', 'Insomnia Cookies', \"Sam's Fried Ice Cream\", 'Wowfulls', 'Ample Hills Creamery', 'il Laboratorio del Gelato', \"M'o Gelato\", 'Morgenstern’s Finest Ice Cream', 'Melt Bakery', 'Jacques Torres Chocolate', 'Baskin-Robbins', 'Marble Slab Creamery', 'sweetFrog', \"Shepherd's Ice Cream\", 'Sweet Cup Gelato & Sorbet', 'Paleteria El Sabor De Michoacan', 'Baskin-Robbins', 'Baskin-Robbins', 'La Costeña Ice Cream Shop', 'Baskin-Robbins', \"Lindy's Chili & Gertie's Ice Cream\", 'Rainbow Ice Cream', 'La Flor De Mayo', 'De Colores', 'La Michoacana', 'La Michoacana'], 'city': ['Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Unknown', 'Houston', 'Houston', 'Chicago', 'Chicago', 'Chicago', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'Brooklyn', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Miami', 'Coral Gables', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Coral Gables', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'Brooklyn', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Houston', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Long Island City', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Jersey City', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'Miami', 'Miami', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Hoboken', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Hoboken', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Rosemont', 'Schiller Park', 'Park Ridge', 'Chicago', 'Rosemont', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Doral', 'Doral', 'Doral', 'Doral', 'Doral', 'Doral', 'Doral', 'Doral', 'Doral', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Pearland', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Miami', 'Coral Gables', 'Coral Gables', 'Coral Gables', 'Miami', 'Miami', 'Miami', 'Miami', 'Coral Gables', 'Miami', 'Miami', 'Miami', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Houston', 'Houston', 'Houston', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'Miami', 'New York', 'Brooklyn', 'Brooklyn', 'Jersey City', 'Brooklyn', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'Brooklyn', 'Jersey City', 'Brooklyn', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'Brooklyn', 'New York', 'New York', 'Jersey City', 'New York', 'New York', 'New York', 'Brooklyn', 'Hudson County', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'Jersey City', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Miami', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Wilmette', 'Wilmette', 'Winnetka', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Fort Campbell', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Aventura', 'Aventura', 'Aventura', 'Sunny Isles Beach', 'Miami', 'Aventura', 'Aventura', 'Unknown', 'Aventura', 'Aventura', 'Aventura', 'Hallandale', 'Hallandale', 'Aventura', 'Aventura', 'Aventura', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'West New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Edgewater', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Miami', 'Miami', 'Miami', 'Miami', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Jersey City', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'Jersey City', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'New York', 'New York', 'New York', 'New York', 'Brooklyn', 'Houston', 'Houston', 'Houston', 'Houston', 'Houston', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago', 'Chicago'], 'zip': ['77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77036', '77072', '77036', '77036', '77082', '77077', '77079', 'Unknown', '77057', '77077', '60649', '60617', '60617', '10012', '10012', '10016', '10001', '10016', '10009', '10012', '10012', '10010', '10003', '10003', '10003', '10012', '10009', '10002', '10010', '10038', '10003', '10011', '10003', '10014', '10013', '10003', '10003', '10002', '11201', '10002', '10014', '10002', '10003', '10013', '10012', '10010', '10013', '10012', '10002', '10009', '10009', '10014', '10014', '10014', '10007', '10011', '10002', '10002', '10012', '10003', '11201', '10011', '11201', '77018', '77018', '77018', '77018', '77018', '77023', '77002', '77204', '77023', '60632', '60609', '60632', '60632', '60632', '60609', 'Unknown', '60632', 'Unknown', '60632', '60632', '60661', '60654', '60607', '60604', '60607', '60607', 'Unknown', '60611', '60610', '60605', '60605', '60606', '60608', '60601', '60601', '60605', '60607', '60611', '60607', '60607', '60610', '60603', '60607', '60602', '60611', '60605', 'Unknown', '60602', 'Unknown', '60610', '60605', '60611', '60605', '60606', '60606', '60608', '60607', '60601', '60611', '60607', '60611', '60607', '60611', '60607', '60607', 'Unknown', '60601', '60601', '60611', '60633', '60633', '60611', '60611', '60654', '60604', '60611', '60607', '60611', '60611', '60611', '60610', '60607', '60606', '60601', '60605', '60601', '60611', '60605', '60611', '60611', '60614', '60610', '60603', '60606', '60605', '60605', '60602', '60602', '60605', '60611', '60607', '60610', '60606', '60611', 'Unknown', '60661', '60601', '60607', '60601', '60611', '60610', '60601', '77018', '77018', '77018', '77018', '77018', '33135', '33134', '33134', '33135', 'Unknown', '33145', '33125', '33135', '33135', '33145', '33135', '33125', '33125', '33145', '10024', '10023', '10024', '10020', '10023', '10023', '10128', '10019', '10036', '10023', '10036', '10022', '10011', '10022', '10021', '10036', '10128', '10028', '10028', '10024', '10036', '10024', '10028', '10024', '10075', '07093', '10028', '10025', '10065', '10021', '10025', '10025', '10028', '10036', '10036', '10023', '10019', '10025', '10065', '10022', '10019', '07020', '10128', '10075', '10112', '10036', '10022', '10036', '10023', '10020', 'Unknown', 'Unknown', '77067', '77069', '10020', '10020', '10023', '10011', '10011', '10036', '10016', '10021', '10010', '10016', '10001', '10016', '10003', '10010', '10028', '10024', '10028', '10023', '10024', '10036', '10024', '10010', '10023', '10010', '10024', '10016', '10003', '10028', '10011', '10065', '10010', '10075', '10021', '10016', '10028', '10028', '10001', '10011', '10036', '10022', '10019', '10001', '10019', '10011', '10011', '10036', '10016', '10022', '10023', '10036', '10038', '10013', '10038', '10009', '11201', '10012', '10003', '10009', '10012', '10003', '10012', '10002', '11231', '10002', '10003', '10002', '11201', 'Unknown', '11201', '10003', '10002', '10014', '10003', '10014', '10013', '10003', '10012', '10013', '10012', '10009', '10011', '10003', '11201', '10013', '10012', '10002', '10009', '10002', '10007', '10014', '10003', '10002', '10012', '10003', '11201', '10012', 'Unknown', '10002', '11201', 'Unknown', '60632', '60609', '60632', '60632', '60632', '60629', '60629', '60629', '60632', '60632', '60629', '60629', '60632', '60629', '60632', '60629', '77099', '33137', '33137', '33127', '33127', '33137', '33127', '33137', 'Unknown', '33137', '33127', '33137', '33127', '33137', '33127', '33127', '33136', '33127', '33127', '33127', '33127', '33137', '33137', '33127', '33127', '77018', '77018', '77018', '77018', '77018', '77056', '77056', '77057', '77027', '77056', '77056', '77027', '77056', '77057', '10028', '10075', '10028', '10028', '10020', '10065', '10023', '10128', '11106', '10019', '10021', '10022', '10021', '10022', '10011', '10017', '10029', '10036', '10019', '10022', '10128', '10028', '10024', '10023', '10024', '10024', '10023', '10028', '10024', '10065', '10021', '10025', '10024', '10025', '10023', '10019', '10025', '10065', '10022', '10019', '10128', '10075', '10112', '10022', '10023', '10017', '10019', '10023', '10023', '10020', '77009', '77009', '77007', '77009', '77007', '77007', '77009', '77008', '77009', '77007', '77007', '10024', '10023', '10024', '10020', '10023', '10023', '10128', '10036', '10019', '10023', '10036', '10022', '10021', '10011', '10022', '10036', '10128', '10028', '10028', '10036', '10024', '10024', '10028', '07093', '10028', '10075', '10025', '10024', '10025', '10025', '10021', '10036', '10065', '10028', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '07020', '10128', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '60654', '60607', '60604', '60611', '60607', '60611', '60611', '60622', '60610', '60622', '60605', '60605', '60601', '60606', '60601', '60607', '60622', '60607', '60611', '60611', '60607', '60603', '60605', 'Unknown', '60606', '60605', '60602', '60622', '60605', '60607', '60610', '60606', '60611', '60602', '60611', '60611', '60661', '60611', '60601', '60601', '60607', '60611', '60611', '60607', '60607', 'Unknown', '60601', '60610', '60611', '77080', '77024', '77043', '77080', 'Unknown', '77055', '77025', '77096', '77025', '77035', '77025', '77054', '77096', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10036', '10019', '10023', '10036', '10011', '10021', '10022', '10022', '10128', '10036', '10028', '10028', '10036', '10024', '10028', '10024', '07093', '10025', '10025', '10025', '10021', '10075', '10036', '10065', '10024', '10028', '10028', '10036', '10023', '10019', '10025', '10065', '10022', '10019', '10128', '07020', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '60618', '60657', '60618', '60613', '60625', '60647', '60647', '60647', '60618', '60647', '60613', '60618', '60625', '60625', '60618', '60618', '60647', '60618', '60618', '60647', '60647', 'Unknown', '60625', '60625', 'Unknown', '60618', '60625', '10024', '10023', '10024', '10020', '10023', '10023', '10128', '10019', '10036', '10023', '10036', '10021', '10022', '10011', '10022', '10036', '10128', '10028', '10028', '10036', '10024', '10024', '10028', '10025', '10021', '10075', '10025', '07093', '10024', '10028', '10025', '10036', '10028', '10065', '10036', '10023', '10019', '10025', '10065', '10022', '10019', '07020', '10128', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '10020', '10023', '10011', '10011', '10016', '10036', '10016', '10010', '10021', '10001', '10020', '10016', '10003', '10010', '10024', '10023', '10028', '10028', '10023', '10019', '10024', '10036', '10024', '10010', '10016', '10003', '10028', '10024', '10010', '10011', '10065', '10021', '10011', '10028', '10016', '10010', '10001', '10024', '10028', '10075', '10036', '10022', '10001', '10019', '10011', '10036', '10016', '10022', '10023', '10036', '77042', '77077', '77063', '77042', '77057', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10019', '10036', '10023', '10036', '10022', '10021', '10011', '10022', '10128', '10036', '10028', '10028', '10024', '10036', '10028', '10024', '10025', '10036', '10025', '10025', '10021', '10065', '07093', '10075', '10024', '10028', '10028', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '10128', '07020', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '77007', '77009', '77019', '77007', '77007', '77007', '77008', '77007', '77019', '77007', '77019', '77007', '60632', '60609', '60632', '60632', '60632', '60609', 'Unknown', '60632', '60632', 'Unknown', '60632', '77065', '77070', '77065', '77070', '77065', 'Unknown', '10013', '10013', '10013', '10009', '10012', '10003', '10003', '10011', '10012', '10012', '10003', '10009', '10002', '07311', '10038', '10014', '11201', '11201', '10002', '10003', '10002', '10003', '10002', '10012', '10003', '10014', '10003', '10003', '10012', '11201', '10012', '10013', '10009', '10003', '10002', '10009', '10007', '10014', '10014', '10003', '10002', '10002', '11201', '10012', '10003', '10011', '10012', 'Unknown', '10002', '11201', '33184', '33184', '10022', '10020', '10020', '10023', '10011', '10011', '10016', '10021', '10016', '10010', '10001', '10016', '10003', '10010', '10024', '10028', '10023', '10028', '10036', '10024', '10010', '10024', '10036', '10024', '10028', '10003', '10016', '10023', '10010', '10011', '10075', '11222', '10021', '10001', '10028', '10010', '10016', '10028', '10011', '10065', '10036', '10019', '10001', '10019', '10011', '10036', '10016', '10022', '10023', '10036', '10003', '10012', '07030', '10003', '10014', '10001', '10016', '10009', '10003', '10010', '10003', '10012', '10009', '10012', '10036', '10002', '10012', '10003', '10002', '10003', '10012', '10011', '10003', '10002', '10013', '10014', '10010', '10003', '10002', '10013', '10003', '07030', '10014', '10010', '10013', '10012', '10002', '10009', '10036', '10009', '10014', '10014', '10001', '10007', '10002', '10011', '10002', '10012', '10011', '10012', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10036', '10019', '10023', '10036', '10022', '10021', '10011', '10022', '10036', '10128', '10028', '10028', '10036', '10024', '10024', '10028', '10025', '07093', '10024', '10065', '10025', '10075', '10025', '10036', '10028', '10021', '10028', '10036', '10023', '10019', '10025', '10065', '10022', '10019', '07020', '10128', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10019', '10036', '10023', '10036', '10022', '10021', '10022', '10011', '10128', '10036', '10028', '10028', '10024', '10036', '10024', '10028', '10028', '07093', '10028', '10024', '10025', '10025', '10025', '10036', '10065', '10075', '10021', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '07020', '10128', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '10020', '10020', '10022', '10023', '10011', '10011', '10036', '10016', '10016', '10010', '10021', '10001', '10016', '10003', '10010', '10024', '10028', '10028', '10023', '10024', '10024', '10010', '10036', '10028', '10010', '10011', '10023', '10016', '10024', '10003', '10065', '10021', '11222', '10028', '10010', '10011', '10028', '10016', '10001', '10075', '10036', '10019', '10001', '10011', '10011', '10036', '10016', '10022', '10023', '10036', '77090', '77090', 'Unknown', '60018', '60176', '60068', '60661', '60018', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10036', '10019', '10023', '10036', '10022', '10021', '10011', '10022', '10128', '10036', '10028', '10028', '10036', '10024', '10028', '10024', '10021', '10028', '10036', '10025', '10075', '10065', '10028', '07093', '10025', '10024', '10025', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '07020', '10128', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '33178', '33172', '33178', '33166', 'Unknown', '33178', 'Unknown', '33122', '33178', '77022', '77095', '77095', '77095', '77095', '77095', '77095', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77047', '77098', '77098', '77027', '77005', '77019', '77005', '77098', '77005', '77027', '77005', '77098', '77098', '77098', '77005', '77098', '77027', '77005', '77098', '77005', '77005', '77018', '77018', '77018', '77018', '77018', '77058', '77062', '77058', '60660', '60640', '60625', '60660', '60640', '60626', '60640', '60660', '60640', '60626', '60640', '60640', '60640', '60626', '60625', '10020', '10020', '10023', '10011', '10011', '10036', '10016', '10021', '10010', '10016', '10001', '10016', '10003', '10010', '10011', '10023', '10028', '10028', '10024', '10010', '10024', '10024', '10036', '10011', '10016', '10003', '10024', '10010', '10028', '10028', '10010', '10001', '10021', '10075', '10016', '10065', '10011', '10028', '10036', '10022', '10019', '10001', '10011', '10014', '10011', '10036', '10016', '10022', '10023', '10036', '10020', '10020', '10023', '10011', '10016', '10016', '10021', '10010', 'Unknown', '10017', '10001', '10016', '10010', '10010', '10023', '10028', '10024', '10028', '10023', '10019', '10036', '10024', '10024', '10024', '10016', '10010', '10028', '10028', '10075', '10010', '11101', '10065', '10001', '10036', '10024', '10028', '10016', '10021', '10024', '10036', '10022', '10001', '10001', '10019', '10128', '10036', '10016', '10022', '10023', '10036', '33144', '33134', '33134', '33134', '33134', '33134', '33126', '33126', 'Unknown', '33125', 'Unknown', '33125', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10036', '10019', '10023', '10036', '10022', '10011', '10021', '10022', '10128', '10036', '10028', '10028', '10036', '10024', '10024', '10028', '10024', '10065', '10075', '10028', '10025', '10021', '10036', '07093', '10025', '10028', '10025', '10036', '10023', '10019', '10025', '10065', '10022', '10019', '10128', '07020', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '77075', '77087', '77075', '77075', '77084', '60604', '60602', '60654', '60607', '60611', '60607', '60603', '60611', '60611', '60605', '60606', '60607', '60605', '60601', '60601', '60605', '60607', '60611', '60607', '60607', '60611', '60610', '60605', '60611', '60610', '60605', 'Unknown', '60606', '60611', '60605', '60602', '60606', '60611', '60607', 'Unknown', '60661', '60607', '60611', '60601', '60607', '60611', '60607', '60611', '60616', '60607', '60607', '60601', 'Unknown', '60601', '60611', 'Unknown', 'Unknown', '77067', '33137', '33137', '33138', '33137', '33137', '33138', '10004', '11231', '11201', '07311', '11231', '10038', '10038', '11201', '10038', '10038', '11201', '11231', '07302', '11201', '10013', '10007', '10005', '11201', '11201', '11201', '10004', '10007', '07302', '10005', '10005', '11201', '11201', 'Unknown', '11231', '10013', '11201', '10004', '10011', '10038', '10038', '11201', '07302', '11201', '10004', '10007', 'Unknown', 'Unknown', '77034', '10020', '10020', '10023', '10011', '10011', '10016', '10021', '10010', '10016', '10001', '10016', '10036', '10003', '10010', '10024', '10023', '10028', '10028', '10011', '10024', '10010', '10036', '10010', '10011', '10016', '10023', '10003', '10001', '10016', '10028', '10028', '10075', '10065', '10010', '10011', '10021', '11222', '10022', '10036', '10019', '10001', '10019', '10011', '10014', '10011', '10036', '10016', '10022', '10023', '10036', '10024', '10023', '10024', '10020', '10023', '10023', '10128', '10019', '10036', '10023', '10036', '10022', '10011', '10021', '10022', '10128', '10036', '10028', '10028', '10024', '10036', '10028', '10024', '07093', '10036', '10025', '10021', '10028', '10028', '10025', '10025', '10065', '10075', '10024', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '10128', '07020', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '77018', '77018', '77018', '77018', '77018', '10020', '10020', '10023', '10036', '10011', '10011', '10016', '10010', '10021', '10016', '10001', '10016', '10009', '10003', '10010', '10011', '10028', '10023', '10003', '10010', '10036', '10024', '10011', '10010', '10016', '10003', '10003', '10065', '10011', '10016', '10010', '10001', '10028', '10021', '10075', '10028', '10036', '10019', '10011', '10001', '10003', '10014', '10011', '10022', '10003', '10011', '10036', '10016', '10022', '10036', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '33150', '77065', '77070', 'Unknown', '77065', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '77018', '60091', '60091', '60093', '77035', '77034', '77040', '77040', '10019', '10020', '10023', '10023', '10020', '10011', '10011', '10016', '10021', '10010', '10016', '10001', '10016', '10010', '10024', '10023', '10028', '10028', '10024', '10036', '10024', '10016', '10024', '10011', '10028', '10010', '10024', '10075', '10016', '10001', '07093', '10028', '10011', '10065', '10036', '10028', '10021', '10010', '10036', '10001', '10001', '10011', '10024', '10022', '10019', '10036', '10016', '10022', '10023', '10036', '10024', '10024', '10023', '10020', '10023', '10023', '10128', '10019', '10036', '10023', '10036', '10022', '10022', '10011', '10021', '10128', '10036', '10028', '10028', '10036', '10024', '10028', '10024', '07093', '10021', '10075', '10036', '10024', '10028', '10025', '10065', '10028', '10025', '10025', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '10128', '07020', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '60616', '60608', '60608', '60616', '60605', '60616', '60607', 'Unknown', '60607', '60616', '60608', '60616', '60616', '60616', '60647', '60622', '60639', '60647', '60618', '60647', '60614', '60647', '60612', '60647', '60618', '60622', '60622', '60647', '60651', '60618', '60622', '60647', 'Unknown', '60618', '60647', '60618', '60641', '60647', '60647', '60647', '60614', 'Unknown', '60647', '60614', '60618', '60647', '60647', '42223', '60617', '60617', 'Unknown', 'Unknown', '60617', '60617', '60617', '60617', '77018', '77018', '77018', '77018', '77018', '33180', '33160', '33160', '33160', '33180', '33180', '33180', 'Unknown', '33180', '33180', '33180', '33009', '33009', '33180', '33160', '33180', '10024', '10023', '10024', '10020', '10023', '10023', '10128', '10036', '10019', '10023', '10036', '10022', '10022', '10011', '10021', '10128', '10036', '10028', '10028', '10036', '10024', '10024', '10028', '10025', '10024', '10021', '10065', '10028', '10025', '07093', '10036', '10028', '10075', '10025', '10036', '10023', '10019', '10065', '10025', '10022', '10019', '10128', '07020', '10075', '10112', '10036', '10022', '10036', '10023', '10020', '33126', '33126', '33144', 'Unknown', '77018', '77018', '77018', '77018', '77018', '10007', 'Unknown', '10013', '10009', '10012', '10003', '10012', '10003', '10009', '10011', '10012', '07311', '10002', '10012', '10002', '10038', '11201', '10012', '10003', '10013', '10038', '10003', '10002', '10003', '10014', '10014', '10003', '10002', '10003', '10013', '11201', '10012', '10013', '10009', '07302', '10002', '10003', '11201', '10009', '10014', '10014', '10003', '10002', '10002', '11201', '10003', '10012', '10012', '10002', '11201', '77018', '77018', '77018', '77018', '77018', '60632', '60609', '60632', '60632', '60632', '60609', 'Unknown', '60632', '60632', 'Unknown', '60632']}\n",
      "2038\n"
     ]
    }
   ],
   "source": [
    "print(ice_dict)\n",
    "print(len(ice_dict['name']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for each zip code in the ice_dict['zip'], count how many occurances of that zip code\n",
    "\n",
    "# create blank list to keep count\n",
    "count=[]\n",
    "\n",
    "# look only at the zip codes of the ice cream shops\n",
    "ice_zip_list = ice_dict['zip']\n",
    "m=0\n",
    "# remove all zip codes not present in zip_list\n",
    "# necessary because the Foursquare 'near' search may return ice cream stores in locations we do not include\n",
    "for zip_ in ice_zip_list:\n",
    "    if zip_ in zip_list:\n",
    "         m +=1 #nothing should happen in this case\n",
    "    else:\n",
    "        for a_ in ice_zip_list:\n",
    "            if a_ == zip_:\n",
    "                ice_zip_list.remove(a_)\n",
    "\n",
    "# turn the list into a numpy array so that we can use .unique()\n",
    "ice_zip_array = np.array(ice_zip_list)\n",
    "ice_zip_master = np.unique(ice_zip_array)\n",
    "\n",
    "# for each unique zip code, count how many occurances in the list of all ice cream store zip codes\n",
    "# store the count in a list called count\n",
    "for i in ice_zip_master:\n",
    "    k=0\n",
    "    for j in ice_zip_array:\n",
    "        if j==i:\n",
    "            k+=1\n",
    "    count.append(k)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>Number of Ice Cream Shops</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10001</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10004</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10007</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10014</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip Number of Ice Cream Shops\n",
       "0  10001                         1\n",
       "1  10004                         4\n",
       "2  10007                         8\n",
       "3  10012                        40\n",
       "4  10014                         1"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# combine list of zip_list zip codes and the count of ice cream stores in each into one data frame\n",
    "\n",
    "count_array = np.array(count)\n",
    "a_ = zip(ice_zip_master, count_array)\n",
    "b_ = list(a_)\n",
    "ice_cream_count = np.array(b_)\n",
    "ice_cream_count_df = pd.DataFrame(ice_cream_count, columns=['Zip', 'Number of Ice Cream Shops'])\n",
    "ice_cream_count_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Gather Weather for Each City"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Jan</th>\n",
       "      <th>Feb</th>\n",
       "      <th>Mar</th>\n",
       "      <th>Apr</th>\n",
       "      <th>May</th>\n",
       "      <th>Jun</th>\n",
       "      <th>Jul</th>\n",
       "      <th>Aug</th>\n",
       "      <th>Sep</th>\n",
       "      <th>Oct</th>\n",
       "      <th>Nov</th>\n",
       "      <th>Dec</th>\n",
       "      <th>Avg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Chicago</th>\n",
       "      <td>32</td>\n",
       "      <td>34</td>\n",
       "      <td>43</td>\n",
       "      <td>55</td>\n",
       "      <td>65</td>\n",
       "      <td>75</td>\n",
       "      <td>81</td>\n",
       "      <td>79</td>\n",
       "      <td>73</td>\n",
       "      <td>61</td>\n",
       "      <td>47</td>\n",
       "      <td>36</td>\n",
       "      <td>56.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Houston</th>\n",
       "      <td>62</td>\n",
       "      <td>65</td>\n",
       "      <td>72</td>\n",
       "      <td>78</td>\n",
       "      <td>84</td>\n",
       "      <td>90</td>\n",
       "      <td>92</td>\n",
       "      <td>93</td>\n",
       "      <td>88</td>\n",
       "      <td>81</td>\n",
       "      <td>71</td>\n",
       "      <td>63</td>\n",
       "      <td>78.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New</th>\n",
       "      <td>39</td>\n",
       "      <td>42</td>\n",
       "      <td>50</td>\n",
       "      <td>60</td>\n",
       "      <td>71</td>\n",
       "      <td>79</td>\n",
       "      <td>85</td>\n",
       "      <td>83</td>\n",
       "      <td>76</td>\n",
       "      <td>65</td>\n",
       "      <td>54</td>\n",
       "      <td>44</td>\n",
       "      <td>62.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Miami</th>\n",
       "      <td>76</td>\n",
       "      <td>78</td>\n",
       "      <td>80</td>\n",
       "      <td>83</td>\n",
       "      <td>87</td>\n",
       "      <td>89</td>\n",
       "      <td>91</td>\n",
       "      <td>91</td>\n",
       "      <td>89</td>\n",
       "      <td>86</td>\n",
       "      <td>82</td>\n",
       "      <td>78</td>\n",
       "      <td>84.166667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec        Avg\n",
       "Chicago   32   34   43   55   65   75   81   79   73   61   47   36  56.750000\n",
       "Houston   62   65   72   78   84   90   92   93   88   81   71   63  78.250000\n",
       "New       39   42   50   60   71   79   85   83   76   65   54   44  62.333333\n",
       "Miami     76   78   80   83   87   89   91   91   89   86   82   78  84.166667"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Weather data\n",
    "# source usclimatedata.com\n",
    "# monthly average high degrees F\n",
    "# lists start in January\n",
    "\n",
    "weather = {'Chicago':[32,34,43,55,65,75,81,79,73,61,47,36],\n",
    "           'Houston':[62,65,72,78,84,90,92,93,88,81,71,63],\n",
    "           'New':[39,42,50,60,71,79,85,83,76,65,54,44],\n",
    "           'Miami':[76,78,80,83,87,89,91,91,89,86,82,78]}\n",
    "\n",
    "weather_df=pd.DataFrame(weather)\n",
    "weather_df = weather_df.transpose()\n",
    "weather_df.rename(columns={0: \"Jan\", 1: \"Feb\", 2:\"Mar\"\n",
    "                           , 3:\"Apr\", 4:\"May\", 5:\"Jun\",\n",
    "                           6:\"Jul\", 7:\"Aug\", 8:\"Sep\",9:\"Oct\", 10:\"Nov\", 11: \"Dec\"}, inplace=True)\n",
    "weather_df['Avg'] = weather_df.mean(axis=1)\n",
    "weather_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Consolidate data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip City Area Population Weather Income Ice Cream\n",
       "0  77036  NaN  NaN        NaN     NaN    NaN       NaN\n",
       "1  77077  NaN  NaN        NaN     NaN    NaN       NaN\n",
       "2  60649  NaN  NaN        NaN     NaN    NaN       NaN\n",
       "3  10012  NaN  NaN        NaN     NaN    NaN       NaN\n",
       "4  77218  NaN  NaN        NaN     NaN    NaN       NaN"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add zip codes to df\n",
    "df['Zip']=np.array(zip_list)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip City     Area Population Weather Income Ice Cream\n",
       "0  77036  NaN      7.1        NaN     NaN    NaN       NaN\n",
       "1  77077  NaN      8.7        NaN     NaN    NaN       NaN\n",
       "2  60649  NaN      3.9        NaN     NaN    NaN       NaN\n",
       "3  10012  NaN      0.3        NaN     NaN    NaN       NaN\n",
       "4  77218  NaN  unknown        NaN     NaN    NaN       NaN"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add area\n",
    "df['Area']=np.array(area_dict['area'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip City     Area Population Weather Income Ice Cream\n",
       "0  77036  NaN      7.1      76831     NaN    NaN       NaN\n",
       "1  77077  NaN      8.7      58131     NaN    NaN       NaN\n",
       "2  60649  NaN      3.9      46024     NaN    NaN       NaN\n",
       "3  10012  NaN      0.3      23411     NaN    NaN       NaN\n",
       "4  77218  NaN  unknown    unknown     NaN    NaN       NaN"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add population\n",
    "df['Population'] = np.array(pop_inc_dict['population'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30632</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65922</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30222</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109037</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip City     Area Population Weather   Income Ice Cream\n",
       "0  77036  NaN      7.1      76831     NaN    30632       NaN\n",
       "1  77077  NaN      8.7      58131     NaN    65922       NaN\n",
       "2  60649  NaN      3.9      46024     NaN    30222       NaN\n",
       "3  10012  NaN      0.3      23411     NaN   109037       NaN\n",
       "4  77218  NaN  unknown    unknown     NaN  unknown       NaN"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add income\n",
    "df['Income']=np.array(pop_inc_dict['income'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30632</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65922</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30222</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>New</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109037</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip     City     Area Population Weather   Income Ice Cream\n",
       "0  77036  Houston      7.1      76831     NaN    30632       NaN\n",
       "1  77077  Houston      8.7      58131     NaN    65922       NaN\n",
       "2  60649  Chicago      3.9      46024     NaN    30222       NaN\n",
       "3  10012      New      0.3      23411     NaN   109037       NaN\n",
       "4  77218  Houston  unknown    unknown     NaN  unknown       NaN"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add cities\n",
    "for zip_ in df['Zip']:\n",
    "    #find column heading in master_df\n",
    "    for city, zipcode in master_dict.items():\n",
    "        if zip_ in zipcode:\n",
    "            #place column heading in df at the correct location\n",
    "            df.loc[df.Zip == zip_, 'City'] = city\n",
    "            \n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30632</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>NaN</td>\n",
       "      <td>65922</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30222</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>New</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>NaN</td>\n",
       "      <td>109037</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>77279</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>10007</td>\n",
       "      <td>New</td>\n",
       "      <td>0.1</td>\n",
       "      <td>7023</td>\n",
       "      <td>NaN</td>\n",
       "      <td>246813</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>77204</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>60694</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>33243</td>\n",
       "      <td>Miami</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Zip     City     Area Population Weather   Income Ice Cream\n",
       "0   77036  Houston      7.1      76831     NaN    30632        16\n",
       "1   77077  Houston      8.7      58131     NaN    65922         3\n",
       "2   60649  Chicago      3.9      46024     NaN    30222         1\n",
       "3   10012      New      0.3      23411     NaN   109037        40\n",
       "4   77218  Houston  unknown    unknown     NaN  unknown         0\n",
       "..    ...      ...      ...        ...     ...      ...       ...\n",
       "95  77279  Houston  unknown    unknown     NaN  unknown         0\n",
       "96  10007      New      0.1       7023     NaN   246813         8\n",
       "97  77204  Houston  unknown    unknown     NaN  unknown         1\n",
       "98  60694  Chicago  unknown    unknown     NaN  unknown         0\n",
       "99  33243    Miami  unknown    unknown     NaN  unknown         0\n",
       "\n",
       "[100 rows x 7 columns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add count of ice cream shops\n",
    "\n",
    "for zip_ in df['Zip']:\n",
    "    count = ice_cream_count_df.loc[ice_cream_count_df.Zip == zip_, 'Number of Ice Cream Shops'].values\n",
    "    if count.size>0:\n",
    "        count = count\n",
    "    else:\n",
    "        count = ['0']\n",
    "    #add this to the correct row, column in the df\n",
    "    df.loc[df.Zip == zip_, 'Ice Cream'] = count\n",
    "    \n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>78.25</td>\n",
       "      <td>30632</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>78.25</td>\n",
       "      <td>65922</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>56.75</td>\n",
       "      <td>30222</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>New</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>109037</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>78.25</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>77279</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>78.25</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>10007</td>\n",
       "      <td>New</td>\n",
       "      <td>0.1</td>\n",
       "      <td>7023</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>246813</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>77204</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>78.25</td>\n",
       "      <td>unknown</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>60694</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>56.75</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>33243</td>\n",
       "      <td>Miami</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Zip     City     Area Population  Weather   Income Ice Cream\n",
       "0   77036  Houston      7.1      76831    78.25    30632        16\n",
       "1   77077  Houston      8.7      58131    78.25    65922         3\n",
       "2   60649  Chicago      3.9      46024    56.75    30222         1\n",
       "3   10012      New      0.3      23411  62.3333   109037        40\n",
       "4   77218  Houston  unknown    unknown    78.25  unknown         0\n",
       "..    ...      ...      ...        ...      ...      ...       ...\n",
       "95  77279  Houston  unknown    unknown    78.25  unknown         0\n",
       "96  10007      New      0.1       7023  62.3333   246813         8\n",
       "97  77204  Houston  unknown    unknown    78.25  unknown         1\n",
       "98  60694  Chicago  unknown    unknown    56.75  unknown         0\n",
       "99  33243    Miami  unknown    unknown  84.1667  unknown         0\n",
       "\n",
       "[100 rows x 7 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add weather\n",
    "for zip_ in df['Zip']:\n",
    "    city = df.loc[df.Zip == zip_, 'City'].values\n",
    "    \n",
    "    #lookup average temperature for that city\n",
    "    weather = weather_df.loc[city, 'Avg'].values\n",
    "    \n",
    "    #place average temperature in df at the correct location\n",
    "    df.loc[df.Zip == zip_, 'Weather'] = weather\n",
    "            \n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>77036</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>78.25</td>\n",
       "      <td>30632</td>\n",
       "      <td>16</td>\n",
       "      <td>29.690</td>\n",
       "      <td>-95.530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77077</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>78.25</td>\n",
       "      <td>65922</td>\n",
       "      <td>3</td>\n",
       "      <td>29.750</td>\n",
       "      <td>-95.630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60649</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>56.75</td>\n",
       "      <td>30222</td>\n",
       "      <td>1</td>\n",
       "      <td>41.770</td>\n",
       "      <td>-87.560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10012</td>\n",
       "      <td>New</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>109037</td>\n",
       "      <td>40</td>\n",
       "      <td>40.726</td>\n",
       "      <td>-73.998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>77218</td>\n",
       "      <td>Houston</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>78.25</td>\n",
       "      <td>unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Zip     City     Area Population  Weather   Income Ice Cream     Lat  \\\n",
       "0  77036  Houston      7.1      76831    78.25    30632        16  29.690   \n",
       "1  77077  Houston      8.7      58131    78.25    65922         3  29.750   \n",
       "2  60649  Chicago      3.9      46024    56.75    30222         1  41.770   \n",
       "3  10012      New      0.3      23411  62.3333   109037        40  40.726   \n",
       "4  77218  Houston  unknown    unknown    78.25  unknown         0     NaN   \n",
       "\n",
       "      Lon  \n",
       "0 -95.530  \n",
       "1 -95.630  \n",
       "2 -87.560  \n",
       "3 -73.998  \n",
       "4     NaN  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add lon lat\n",
    "\n",
    "#make a df from zip_ll_dict\n",
    "zip_ll_df = pd.DataFrame.from_dict(zip_ll_dict)\n",
    "\n",
    "#merge might be faster, but here is this\n",
    "for zip_ in df['Zip']:\n",
    "    lat = zip_ll_df.loc[zip_ll_df.zip == zip_, 'lat']\n",
    "    lon = zip_ll_df.loc[zip_ll_df.zip == zip_, 'lon']\n",
    "    \n",
    "    #place lat and lon in correct spots\n",
    "    df.loc[df.Zip == zip_, 'Lat'] = lat\n",
    "    df.loc[df.Zip == zip_, 'Lon'] = lon\n",
    "    \n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "End of Gather Data\n",
    "\n",
    "----\n",
    "\n",
    "### Explore Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Zip</th>\n",
       "      <th>City</th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60660</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>1.5</td>\n",
       "      <td>43242</td>\n",
       "      <td>56.75</td>\n",
       "      <td>49241</td>\n",
       "      <td>3</td>\n",
       "      <td>41.9800</td>\n",
       "      <td>-87.6600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>60656</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>3.2</td>\n",
       "      <td>27579</td>\n",
       "      <td>56.75</td>\n",
       "      <td>61599</td>\n",
       "      <td>0</td>\n",
       "      <td>41.9700</td>\n",
       "      <td>-87.8200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60618</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>5.0</td>\n",
       "      <td>94395</td>\n",
       "      <td>56.75</td>\n",
       "      <td>73810</td>\n",
       "      <td>15</td>\n",
       "      <td>41.9500</td>\n",
       "      <td>-87.7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60632</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>7.4</td>\n",
       "      <td>91039</td>\n",
       "      <td>56.75</td>\n",
       "      <td>42758</td>\n",
       "      <td>29</td>\n",
       "      <td>41.8200</td>\n",
       "      <td>-87.6900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60647</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>4.0</td>\n",
       "      <td>87509</td>\n",
       "      <td>56.75</td>\n",
       "      <td>73443</td>\n",
       "      <td>21</td>\n",
       "      <td>41.9200</td>\n",
       "      <td>-87.7000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>60617</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>15.4</td>\n",
       "      <td>82534</td>\n",
       "      <td>56.75</td>\n",
       "      <td>40265</td>\n",
       "      <td>8</td>\n",
       "      <td>41.7300</td>\n",
       "      <td>-87.5500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>60616</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>4.6</td>\n",
       "      <td>54464</td>\n",
       "      <td>56.75</td>\n",
       "      <td>45997</td>\n",
       "      <td>8</td>\n",
       "      <td>41.8400</td>\n",
       "      <td>-87.6200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>60654</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>0.6</td>\n",
       "      <td>19135</td>\n",
       "      <td>56.75</td>\n",
       "      <td>112699</td>\n",
       "      <td>4</td>\n",
       "      <td>41.8900</td>\n",
       "      <td>-87.6400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>60611</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>1.4</td>\n",
       "      <td>32426</td>\n",
       "      <td>56.75</td>\n",
       "      <td>103522</td>\n",
       "      <td>44</td>\n",
       "      <td>41.9100</td>\n",
       "      <td>-87.6100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>60633</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>12.2</td>\n",
       "      <td>12871</td>\n",
       "      <td>56.75</td>\n",
       "      <td>47083</td>\n",
       "      <td>2</td>\n",
       "      <td>41.6700</td>\n",
       "      <td>-87.5600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>60661</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>0.2</td>\n",
       "      <td>9926</td>\n",
       "      <td>56.75</td>\n",
       "      <td>107245</td>\n",
       "      <td>5</td>\n",
       "      <td>41.8830</td>\n",
       "      <td>-87.6440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>60649</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>3.9</td>\n",
       "      <td>46024</td>\n",
       "      <td>56.75</td>\n",
       "      <td>30222</td>\n",
       "      <td>1</td>\n",
       "      <td>41.7700</td>\n",
       "      <td>-87.5600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>60603</td>\n",
       "      <td>Chicago</td>\n",
       "      <td>0.1</td>\n",
       "      <td>1174</td>\n",
       "      <td>56.75</td>\n",
       "      <td>151765</td>\n",
       "      <td>4</td>\n",
       "      <td>41.8800</td>\n",
       "      <td>-87.6290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>77035</td>\n",
       "      <td>Houston</td>\n",
       "      <td>5.7</td>\n",
       "      <td>38524</td>\n",
       "      <td>78.25</td>\n",
       "      <td>43503</td>\n",
       "      <td>2</td>\n",
       "      <td>29.6500</td>\n",
       "      <td>-95.4800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>77095</td>\n",
       "      <td>Houston</td>\n",
       "      <td>15.5</td>\n",
       "      <td>71878</td>\n",
       "      <td>78.25</td>\n",
       "      <td>94290</td>\n",
       "      <td>6</td>\n",
       "      <td>29.9100</td>\n",
       "      <td>-95.6400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>77090</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.2</td>\n",
       "      <td>39381</td>\n",
       "      <td>78.25</td>\n",
       "      <td>39879</td>\n",
       "      <td>2</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>-95.4500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>77036</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.1</td>\n",
       "      <td>76831</td>\n",
       "      <td>78.25</td>\n",
       "      <td>30632</td>\n",
       "      <td>16</td>\n",
       "      <td>29.6900</td>\n",
       "      <td>-95.5300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>77059</td>\n",
       "      <td>Houston</td>\n",
       "      <td>9.9</td>\n",
       "      <td>16944</td>\n",
       "      <td>78.25</td>\n",
       "      <td>134688</td>\n",
       "      <td>0</td>\n",
       "      <td>29.6100</td>\n",
       "      <td>-95.1200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>77016</td>\n",
       "      <td>Houston</td>\n",
       "      <td>9.7</td>\n",
       "      <td>30184</td>\n",
       "      <td>78.25</td>\n",
       "      <td>34885</td>\n",
       "      <td>0</td>\n",
       "      <td>29.8600</td>\n",
       "      <td>-95.3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>77046</td>\n",
       "      <td>Houston</td>\n",
       "      <td>0.1</td>\n",
       "      <td>970</td>\n",
       "      <td>78.25</td>\n",
       "      <td>81803</td>\n",
       "      <td>0</td>\n",
       "      <td>29.7320</td>\n",
       "      <td>-95.4350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>77078</td>\n",
       "      <td>Houston</td>\n",
       "      <td>10.8</td>\n",
       "      <td>15411</td>\n",
       "      <td>78.25</td>\n",
       "      <td>37356</td>\n",
       "      <td>0</td>\n",
       "      <td>29.8500</td>\n",
       "      <td>-95.2600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>77065</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.2</td>\n",
       "      <td>38265</td>\n",
       "      <td>78.25</td>\n",
       "      <td>56362</td>\n",
       "      <td>5</td>\n",
       "      <td>29.9200</td>\n",
       "      <td>-95.6100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>77075</td>\n",
       "      <td>Houston</td>\n",
       "      <td>11.2</td>\n",
       "      <td>43933</td>\n",
       "      <td>78.25</td>\n",
       "      <td>53633</td>\n",
       "      <td>3</td>\n",
       "      <td>29.6200</td>\n",
       "      <td>-95.2600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>77047</td>\n",
       "      <td>Houston</td>\n",
       "      <td>14.1</td>\n",
       "      <td>29693</td>\n",
       "      <td>78.25</td>\n",
       "      <td>64648</td>\n",
       "      <td>1</td>\n",
       "      <td>29.6100</td>\n",
       "      <td>-95.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>77040</td>\n",
       "      <td>Houston</td>\n",
       "      <td>14.1</td>\n",
       "      <td>48290</td>\n",
       "      <td>78.25</td>\n",
       "      <td>56974</td>\n",
       "      <td>2</td>\n",
       "      <td>29.8700</td>\n",
       "      <td>-95.5400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>77051</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.3</td>\n",
       "      <td>17052</td>\n",
       "      <td>78.25</td>\n",
       "      <td>27496</td>\n",
       "      <td>0</td>\n",
       "      <td>29.6600</td>\n",
       "      <td>-95.3700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>77056</td>\n",
       "      <td>Houston</td>\n",
       "      <td>3.4</td>\n",
       "      <td>21807</td>\n",
       "      <td>78.25</td>\n",
       "      <td>109515</td>\n",
       "      <td>5</td>\n",
       "      <td>29.7500</td>\n",
       "      <td>-95.4700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>77077</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.7</td>\n",
       "      <td>58131</td>\n",
       "      <td>78.25</td>\n",
       "      <td>65922</td>\n",
       "      <td>3</td>\n",
       "      <td>29.7500</td>\n",
       "      <td>-95.6300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>77066</td>\n",
       "      <td>Houston</td>\n",
       "      <td>8.6</td>\n",
       "      <td>36703</td>\n",
       "      <td>78.25</td>\n",
       "      <td>60106</td>\n",
       "      <td>0</td>\n",
       "      <td>29.9600</td>\n",
       "      <td>-95.5000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>77031</td>\n",
       "      <td>Houston</td>\n",
       "      <td>3.1</td>\n",
       "      <td>17536</td>\n",
       "      <td>78.25</td>\n",
       "      <td>50155</td>\n",
       "      <td>0</td>\n",
       "      <td>29.6600</td>\n",
       "      <td>-95.5500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>77064</td>\n",
       "      <td>Houston</td>\n",
       "      <td>14.8</td>\n",
       "      <td>49790</td>\n",
       "      <td>78.25</td>\n",
       "      <td>70324</td>\n",
       "      <td>0</td>\n",
       "      <td>29.9300</td>\n",
       "      <td>-95.5400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>77009</td>\n",
       "      <td>Houston</td>\n",
       "      <td>6.1</td>\n",
       "      <td>36260</td>\n",
       "      <td>78.25</td>\n",
       "      <td>53116</td>\n",
       "      <td>6</td>\n",
       "      <td>29.7900</td>\n",
       "      <td>-95.3700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>77043</td>\n",
       "      <td>Houston</td>\n",
       "      <td>14.9</td>\n",
       "      <td>25447</td>\n",
       "      <td>78.25</td>\n",
       "      <td>64298</td>\n",
       "      <td>1</td>\n",
       "      <td>29.8100</td>\n",
       "      <td>-95.5800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>77071</td>\n",
       "      <td>Houston</td>\n",
       "      <td>4.5</td>\n",
       "      <td>28558</td>\n",
       "      <td>78.25</td>\n",
       "      <td>46801</td>\n",
       "      <td>0</td>\n",
       "      <td>29.6500</td>\n",
       "      <td>-95.5200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>77025</td>\n",
       "      <td>Houston</td>\n",
       "      <td>4.3</td>\n",
       "      <td>28955</td>\n",
       "      <td>78.25</td>\n",
       "      <td>74792</td>\n",
       "      <td>3</td>\n",
       "      <td>29.6800</td>\n",
       "      <td>-95.4300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>77042</td>\n",
       "      <td>Houston</td>\n",
       "      <td>6.2</td>\n",
       "      <td>42515</td>\n",
       "      <td>78.25</td>\n",
       "      <td>48269</td>\n",
       "      <td>2</td>\n",
       "      <td>29.7400</td>\n",
       "      <td>-95.5600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>77007</td>\n",
       "      <td>Houston</td>\n",
       "      <td>7.9</td>\n",
       "      <td>37492</td>\n",
       "      <td>78.25</td>\n",
       "      <td>124355</td>\n",
       "      <td>12</td>\n",
       "      <td>29.7700</td>\n",
       "      <td>-95.4100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>33127</td>\n",
       "      <td>Miami</td>\n",
       "      <td>3.3</td>\n",
       "      <td>33464</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>30231</td>\n",
       "      <td>13</td>\n",
       "      <td>25.8100</td>\n",
       "      <td>-80.2100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>33126</td>\n",
       "      <td>Miami</td>\n",
       "      <td>5.6</td>\n",
       "      <td>52987</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>35319</td>\n",
       "      <td>4</td>\n",
       "      <td>25.7800</td>\n",
       "      <td>-80.3000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>33135</td>\n",
       "      <td>Miami</td>\n",
       "      <td>2.1</td>\n",
       "      <td>39789</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>27172</td>\n",
       "      <td>5</td>\n",
       "      <td>25.7700</td>\n",
       "      <td>-80.2300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>33167</td>\n",
       "      <td>Miami</td>\n",
       "      <td>4.3</td>\n",
       "      <td>19837</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>36870</td>\n",
       "      <td>0</td>\n",
       "      <td>25.8900</td>\n",
       "      <td>-80.2400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>33134</td>\n",
       "      <td>Miami</td>\n",
       "      <td>5.2</td>\n",
       "      <td>41861</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>67818</td>\n",
       "      <td>7</td>\n",
       "      <td>25.7500</td>\n",
       "      <td>-80.2700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>33180</td>\n",
       "      <td>Miami</td>\n",
       "      <td>3.9</td>\n",
       "      <td>31883</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>70014</td>\n",
       "      <td>9</td>\n",
       "      <td>25.9600</td>\n",
       "      <td>-80.1400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>33178</td>\n",
       "      <td>Miami</td>\n",
       "      <td>63.6</td>\n",
       "      <td>51459</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>80554</td>\n",
       "      <td>4</td>\n",
       "      <td>25.8500</td>\n",
       "      <td>-80.3700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>33184</td>\n",
       "      <td>Miami</td>\n",
       "      <td>2.6</td>\n",
       "      <td>21733</td>\n",
       "      <td>84.1667</td>\n",
       "      <td>50569</td>\n",
       "      <td>2</td>\n",
       "      <td>25.7600</td>\n",
       "      <td>-80.4100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>10177</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7910</td>\n",
       "      <td>-73.9660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>10154</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7580</td>\n",
       "      <td>-73.9720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>10004</td>\n",
       "      <td>New</td>\n",
       "      <td>0.5</td>\n",
       "      <td>3028</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>157645</td>\n",
       "      <td>4</td>\n",
       "      <td>40.7000</td>\n",
       "      <td>-74.0200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>10153</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7639</td>\n",
       "      <td>-73.9733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>10111</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7591</td>\n",
       "      <td>-73.9776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>10020</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>44</td>\n",
       "      <td>40.7590</td>\n",
       "      <td>-73.9810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>10152</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7584</td>\n",
       "      <td>-73.9718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>10278</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7150</td>\n",
       "      <td>-74.0040</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>10075</td>\n",
       "      <td>New</td>\n",
       "      <td>0.1</td>\n",
       "      <td>21556</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>137146</td>\n",
       "      <td>35</td>\n",
       "      <td>40.7700</td>\n",
       "      <td>-73.9600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>10038</td>\n",
       "      <td>New</td>\n",
       "      <td>0.2</td>\n",
       "      <td>22800</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>86058</td>\n",
       "      <td>12</td>\n",
       "      <td>40.7100</td>\n",
       "      <td>-74.0030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>10103</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7610</td>\n",
       "      <td>-73.9780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>10012</td>\n",
       "      <td>New</td>\n",
       "      <td>0.3</td>\n",
       "      <td>23411</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>109037</td>\n",
       "      <td>40</td>\n",
       "      <td>40.7260</td>\n",
       "      <td>-73.9980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>10171</td>\n",
       "      <td>New</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>-666666666</td>\n",
       "      <td>0</td>\n",
       "      <td>40.7560</td>\n",
       "      <td>-73.9740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>10007</td>\n",
       "      <td>New</td>\n",
       "      <td>0.1</td>\n",
       "      <td>7023</td>\n",
       "      <td>62.3333</td>\n",
       "      <td>246813</td>\n",
       "      <td>8</td>\n",
       "      <td>40.7140</td>\n",
       "      <td>-74.0080</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Zip     City  Area Population  Weather      Income Ice Cream      Lat  \\\n",
       "0   60660  Chicago   1.5      43242    56.75       49241         3  41.9800   \n",
       "1   60656  Chicago   3.2      27579    56.75       61599         0  41.9700   \n",
       "2   60618  Chicago   5.0      94395    56.75       73810        15  41.9500   \n",
       "3   60632  Chicago   7.4      91039    56.75       42758        29  41.8200   \n",
       "4   60647  Chicago   4.0      87509    56.75       73443        21  41.9200   \n",
       "5   60617  Chicago  15.4      82534    56.75       40265         8  41.7300   \n",
       "6   60616  Chicago   4.6      54464    56.75       45997         8  41.8400   \n",
       "7   60654  Chicago   0.6      19135    56.75      112699         4  41.8900   \n",
       "8   60611  Chicago   1.4      32426    56.75      103522        44  41.9100   \n",
       "9   60633  Chicago  12.2      12871    56.75       47083         2  41.6700   \n",
       "10  60661  Chicago   0.2       9926    56.75      107245         5  41.8830   \n",
       "11  60649  Chicago   3.9      46024    56.75       30222         1  41.7700   \n",
       "12  60603  Chicago   0.1       1174    56.75      151765         4  41.8800   \n",
       "13  77035  Houston   5.7      38524    78.25       43503         2  29.6500   \n",
       "14  77095  Houston  15.5      71878    78.25       94290         6  29.9100   \n",
       "15  77090  Houston   8.2      39381    78.25       39879         2  30.0000   \n",
       "16  77036  Houston   7.1      76831    78.25       30632        16  29.6900   \n",
       "17  77059  Houston   9.9      16944    78.25      134688         0  29.6100   \n",
       "18  77016  Houston   9.7      30184    78.25       34885         0  29.8600   \n",
       "19  77046  Houston   0.1        970    78.25       81803         0  29.7320   \n",
       "20  77078  Houston  10.8      15411    78.25       37356         0  29.8500   \n",
       "21  77065  Houston   8.2      38265    78.25       56362         5  29.9200   \n",
       "22  77075  Houston  11.2      43933    78.25       53633         3  29.6200   \n",
       "23  77047  Houston  14.1      29693    78.25       64648         1  29.6100   \n",
       "24  77040  Houston  14.1      48290    78.25       56974         2  29.8700   \n",
       "25  77051  Houston   7.3      17052    78.25       27496         0  29.6600   \n",
       "26  77056  Houston   3.4      21807    78.25      109515         5  29.7500   \n",
       "27  77077  Houston   8.7      58131    78.25       65922         3  29.7500   \n",
       "28  77066  Houston   8.6      36703    78.25       60106         0  29.9600   \n",
       "29  77031  Houston   3.1      17536    78.25       50155         0  29.6600   \n",
       "30  77064  Houston  14.8      49790    78.25       70324         0  29.9300   \n",
       "31  77009  Houston   6.1      36260    78.25       53116         6  29.7900   \n",
       "32  77043  Houston  14.9      25447    78.25       64298         1  29.8100   \n",
       "33  77071  Houston   4.5      28558    78.25       46801         0  29.6500   \n",
       "34  77025  Houston   4.3      28955    78.25       74792         3  29.6800   \n",
       "35  77042  Houston   6.2      42515    78.25       48269         2  29.7400   \n",
       "36  77007  Houston   7.9      37492    78.25      124355        12  29.7700   \n",
       "37  33127    Miami   3.3      33464  84.1667       30231        13  25.8100   \n",
       "38  33126    Miami   5.6      52987  84.1667       35319         4  25.7800   \n",
       "39  33135    Miami   2.1      39789  84.1667       27172         5  25.7700   \n",
       "40  33167    Miami   4.3      19837  84.1667       36870         0  25.8900   \n",
       "41  33134    Miami   5.2      41861  84.1667       67818         7  25.7500   \n",
       "42  33180    Miami   3.9      31883  84.1667       70014         9  25.9600   \n",
       "43  33178    Miami  63.6      51459  84.1667       80554         4  25.8500   \n",
       "44  33184    Miami   2.6      21733  84.1667       50569         2  25.7600   \n",
       "45  10177      New   0.0          0  62.3333  -666666666         0  40.7910   \n",
       "46  10154      New   0.0          0  62.3333  -666666666         0  40.7580   \n",
       "47  10004      New   0.5       3028  62.3333      157645         4  40.7000   \n",
       "48  10153      New   0.0          0  62.3333  -666666666         0  40.7639   \n",
       "49  10111      New   0.0          0  62.3333  -666666666         0  40.7591   \n",
       "50  10020      New   0.0          0  62.3333  -666666666        44  40.7590   \n",
       "51  10152      New   0.0          0  62.3333  -666666666         0  40.7584   \n",
       "52  10278      New   0.0          0  62.3333  -666666666         0  40.7150   \n",
       "53  10075      New   0.1      21556  62.3333      137146        35  40.7700   \n",
       "54  10038      New   0.2      22800  62.3333       86058        12  40.7100   \n",
       "55  10103      New   0.0          0  62.3333  -666666666         0  40.7610   \n",
       "56  10012      New   0.3      23411  62.3333      109037        40  40.7260   \n",
       "57  10171      New   0.0          0  62.3333  -666666666         0  40.7560   \n",
       "58  10007      New   0.1       7023  62.3333      246813         8  40.7140   \n",
       "\n",
       "        Lon  \n",
       "0  -87.6600  \n",
       "1  -87.8200  \n",
       "2  -87.7000  \n",
       "3  -87.6900  \n",
       "4  -87.7000  \n",
       "5  -87.5500  \n",
       "6  -87.6200  \n",
       "7  -87.6400  \n",
       "8  -87.6100  \n",
       "9  -87.5600  \n",
       "10 -87.6440  \n",
       "11 -87.5600  \n",
       "12 -87.6290  \n",
       "13 -95.4800  \n",
       "14 -95.6400  \n",
       "15 -95.4500  \n",
       "16 -95.5300  \n",
       "17 -95.1200  \n",
       "18 -95.3000  \n",
       "19 -95.4350  \n",
       "20 -95.2600  \n",
       "21 -95.6100  \n",
       "22 -95.2600  \n",
       "23 -95.3800  \n",
       "24 -95.5400  \n",
       "25 -95.3700  \n",
       "26 -95.4700  \n",
       "27 -95.6300  \n",
       "28 -95.5000  \n",
       "29 -95.5500  \n",
       "30 -95.5400  \n",
       "31 -95.3700  \n",
       "32 -95.5800  \n",
       "33 -95.5200  \n",
       "34 -95.4300  \n",
       "35 -95.5600  \n",
       "36 -95.4100  \n",
       "37 -80.2100  \n",
       "38 -80.3000  \n",
       "39 -80.2300  \n",
       "40 -80.2400  \n",
       "41 -80.2700  \n",
       "42 -80.1400  \n",
       "43 -80.3700  \n",
       "44 -80.4100  \n",
       "45 -73.9660  \n",
       "46 -73.9720  \n",
       "47 -74.0200  \n",
       "48 -73.9733  \n",
       "49 -73.9776  \n",
       "50 -73.9810  \n",
       "51 -73.9718  \n",
       "52 -74.0040  \n",
       "53 -73.9600  \n",
       "54 -74.0030  \n",
       "55 -73.9780  \n",
       "56 -73.9980  \n",
       "57 -73.9740  \n",
       "58 -74.0080  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# clean data\n",
    "# remove zip codes with unknown population\n",
    "# remove zip codes with unknown area\n",
    "df_2 = df\n",
    "df_2 = df_2[df_2['Area'] != 'unknown']\n",
    "df_2 = df_2[df_2['Population'] != 'unknown']\n",
    "df_2 = df_2[df_2['Income'] != 'unknown']\n",
    "\n",
    "# sort df by city\n",
    "df_2.sort_values('City', inplace=True)\n",
    "\n",
    "#re index\n",
    "df_2.reset_index(inplace=True, drop=True)\n",
    "\n",
    "df_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# correct data types\n",
    "# make Area, Population, Weather, Income and Ice Cream numerical instead of string\n",
    "df_2['Area']=df_2['Area'].astype('float')\n",
    "df_2['Population']=df_2['Population'].astype('float')\n",
    "df_2['Weather']=df_2['Weather'].astype('float')\n",
    "df_2['Income']=df_2['Income'].astype('float')\n",
    "df_2['Ice Cream']=df_2['Ice Cream'].astype('int')\n",
    "df_2['Lat']=df_2['Lat'].astype('float')\n",
    "df_2['Lon']=df_2['Lon'].astype('float')\n",
    "\n",
    "# remove zip codes with income <10000 (ten thousand) or >10000000 (ten million)\n",
    "df_2=df_2[df_2['Income'] > 10000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jupyterlab/conda/envs/python/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n",
      "/home/jupyterlab/conda/envs/python/lib/python3.6/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/home/jupyterlab/conda/envs/python/lib/python3.6/site-packages/ipykernel_launcher.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  after removing the cwd from sys.path.\n",
      "/home/jupyterlab/conda/envs/python/lib/python3.6/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>Population Density</th>\n",
       "      <th>Ice Cream Density</th>\n",
       "      <th>Ice Cream per Person</th>\n",
       "      <th>Ice Cream per Income</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.114000</td>\n",
       "      <td>36473.980000</td>\n",
       "      <td>72.015000</td>\n",
       "      <td>71973.940000</td>\n",
       "      <td>7.120000</td>\n",
       "      <td>33.377500</td>\n",
       "      <td>-88.849540</td>\n",
       "      <td>18151.353060</td>\n",
       "      <td>15.450564</td>\n",
       "      <td>0.000317</td>\n",
       "      <td>0.000107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>9.360643</td>\n",
       "      <td>22673.741655</td>\n",
       "      <td>10.702132</td>\n",
       "      <td>41970.150691</td>\n",
       "      <td>10.185304</td>\n",
       "      <td>6.349428</td>\n",
       "      <td>7.502802</td>\n",
       "      <td>35540.455074</td>\n",
       "      <td>53.787896</td>\n",
       "      <td>0.000613</td>\n",
       "      <td>0.000148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.100000</td>\n",
       "      <td>970.000000</td>\n",
       "      <td>56.750000</td>\n",
       "      <td>27172.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.750000</td>\n",
       "      <td>-95.640000</td>\n",
       "      <td>809.103774</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.725000</td>\n",
       "      <td>21600.250000</td>\n",
       "      <td>58.145833</td>\n",
       "      <td>44126.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>29.652500</td>\n",
       "      <td>-95.465000</td>\n",
       "      <td>4619.264441</td>\n",
       "      <td>0.068066</td>\n",
       "      <td>0.000035</td>\n",
       "      <td>0.000018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.100000</td>\n",
       "      <td>32945.000000</td>\n",
       "      <td>78.250000</td>\n",
       "      <td>60852.500000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>29.855000</td>\n",
       "      <td>-87.760000</td>\n",
       "      <td>6746.158711</td>\n",
       "      <td>0.653715</td>\n",
       "      <td>0.000094</td>\n",
       "      <td>0.000046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>8.675000</td>\n",
       "      <td>45501.250000</td>\n",
       "      <td>78.250000</td>\n",
       "      <td>84994.250000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>41.445000</td>\n",
       "      <td>-82.195000</td>\n",
       "      <td>11830.256410</td>\n",
       "      <td>2.845238</td>\n",
       "      <td>0.000237</td>\n",
       "      <td>0.000125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>63.600000</td>\n",
       "      <td>94395.000000</td>\n",
       "      <td>84.166667</td>\n",
       "      <td>246813.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>41.980000</td>\n",
       "      <td>-73.960000</td>\n",
       "      <td>215560.000000</td>\n",
       "      <td>350.000000</td>\n",
       "      <td>0.003407</td>\n",
       "      <td>0.000678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Area    Population    Weather         Income  Ice Cream  \\\n",
       "count  50.000000     50.000000  50.000000      50.000000  50.000000   \n",
       "mean    7.114000  36473.980000  72.015000   71973.940000   7.120000   \n",
       "std     9.360643  22673.741655  10.702132   41970.150691  10.185304   \n",
       "min     0.100000    970.000000  56.750000   27172.000000   0.000000   \n",
       "25%     2.725000  21600.250000  58.145833   44126.500000   1.000000   \n",
       "50%     5.100000  32945.000000  78.250000   60852.500000   4.000000   \n",
       "75%     8.675000  45501.250000  78.250000   84994.250000   8.000000   \n",
       "max    63.600000  94395.000000  84.166667  246813.000000  44.000000   \n",
       "\n",
       "             Lat        Lon  Population Density  Ice Cream Density  \\\n",
       "count  50.000000  50.000000           50.000000          50.000000   \n",
       "mean   33.377500 -88.849540        18151.353060          15.450564   \n",
       "std     6.349428   7.502802        35540.455074          53.787896   \n",
       "min    25.750000 -95.640000          809.103774           0.000000   \n",
       "25%    29.652500 -95.465000         4619.264441           0.068066   \n",
       "50%    29.855000 -87.760000         6746.158711           0.653715   \n",
       "75%    41.445000 -82.195000        11830.256410           2.845238   \n",
       "max    41.980000 -73.960000       215560.000000         350.000000   \n",
       "\n",
       "       Ice Cream per Person  Ice Cream per Income  \n",
       "count             50.000000             50.000000  \n",
       "mean               0.000317              0.000107  \n",
       "std                0.000613              0.000148  \n",
       "min                0.000000              0.000000  \n",
       "25%                0.000035              0.000018  \n",
       "50%                0.000094              0.000046  \n",
       "75%                0.000237              0.000125  \n",
       "max                0.003407              0.000678  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# add population density and ice cream density columns\n",
    "df_2['Population Density'] = df_2['Population'] / df_2['Area']\n",
    "df_2['Ice Cream Density'] = df_2['Ice Cream'] / df_2['Area']\n",
    "df_2['Ice Cream per Person'] = df_2['Ice Cream'] / df_2['Population']\n",
    "df_2['Ice Cream per Income'] = df_2['Ice Cream'] / df_2['Income']\n",
    "df_2.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot 1\n",
    "# plot x = income, y = ice cream, size of bubble = temperature, color of bubble = city, size of bubble = temperature\n",
    "\n",
    "fig, ax = plt.pyplot.subplots()\n",
    "\n",
    "colors = {'Chicago':'blue', 'New':'red', 'Miami':'green', 'Houston':'orange'}\n",
    "\n",
    "grouped = df_2.groupby('City')\n",
    "for key, group in grouped:\n",
    "    group.plot(ax=ax, kind='scatter', x='Income', y='Ice Cream', s='Weather', label=key, color=colors[key])\n",
    "\n",
    "plt.pyplot.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot 2\n",
    "# plot x = income, y = ice cream, color of bubble = city\n",
    "\n",
    "fig, ax = plt.pyplot.subplots()\n",
    "\n",
    "colors = {'Chicago':'blue', 'New':'red', 'Miami':'green', 'Houston':'orange'}\n",
    "\n",
    "grouped = df_2.groupby('City')\n",
    "for key, group in grouped:\n",
    "    group.plot(ax=ax, kind='scatter', x='Income', y='Ice Cream', label=key, color=colors[key])\n",
    "\n",
    "plt.pyplot.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 437.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot income vs ice cream and distinguish city with color\n",
    "#try seaborn\n",
    "\n",
    "sns.lmplot('Income', 'Ice Cream', data=df_2, hue='City', fit_reg=False)\n",
    "plt.pyplot.title(\"Income v Ice Cream\")\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 437.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot income vs ice cream/person and distinguish city with color\n",
    "\n",
    "sns.lmplot('Income', 'Ice Cream per Person', data=df_2, hue='City', fit_reg=False)\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 437.375x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot ice cream per person vs ice cream per area\n",
    "\n",
    "sns.lmplot('Ice Cream Density', 'Ice Cream per Person', data=df_2, hue='City', fit_reg=False)\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Zip                      object\n",
       "City                     object\n",
       "Area                    float64\n",
       "Population              float64\n",
       "Weather                 float64\n",
       "Income                  float64\n",
       "Ice Cream                 int64\n",
       "Lat                     float64\n",
       "Lon                     float64\n",
       "Population Density      float64\n",
       "Ice Cream Density       float64\n",
       "Ice Cream per Person    float64\n",
       "Ice Cream per Income    float64\n",
       "Chicago                   uint8\n",
       "Houston                   uint8\n",
       "Miami                     uint8\n",
       "New                       uint8\n",
       "dtype: object"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# One hot encoding for city\n",
    "\n",
    "df_3 = pd.get_dummies(df_2['City'])\n",
    "df_2 = pd.concat([df_2, df_3], axis=1)\n",
    "df_2.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2463955235389761\n"
     ]
    }
   ],
   "source": [
    "#plot regressions\n",
    "\n",
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Income', y='Ice Cream', data=df_2)\n",
    "plt.pyplot.show()\n",
    "corr_=df_2['Income'].corr(df_2['Ice Cream'])\n",
    "print(corr_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2550454268817388\n"
     ]
    }
   ],
   "source": [
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Population', y='Ice Cream', data=df_2)\n",
    "plt.pyplot.show()\n",
    "corr_=df_2['Population'].corr(df_2['Ice Cream'])\n",
    "print(corr_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.624514617923676\n"
     ]
    }
   ],
   "source": [
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Income', y='Ice Cream per Person', data=df_2)\n",
    "plt.pyplot.show()\n",
    "corr_=df_2['Income'].corr(df_2['Ice Cream per Person'])\n",
    "print(corr_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Income', y='Ice Cream Density', data=df_2)\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Weather', y='Ice Cream', data=df_2)\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Weather', y='Ice Cream per Person', data=df_2)\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=plt.pyplot.figure()\n",
    "ax = sns.regplot(x='Weather', y='Ice Cream Density', data=df_2)\n",
    "plt.pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ICpP-Inc 0.6245146179236762\n",
      "ICpP-Wea -0.4303706695735431\n",
      "ICD-Inc 0.4343637218549035\n",
      "ICD-Wea -0.27449670466946996\n",
      "IC-Wea -0.4103476799273515\n",
      "IC-Inc 0.24639552353897598\n",
      "max correlation is: 0.6245146179236762\n"
     ]
    }
   ],
   "source": [
    "# coefficients\n",
    "\n",
    "a_ = scipy.stats.pearsonr(df_2['Ice Cream per Person'], df_2['Income'])\n",
    "b_ = scipy.stats.pearsonr(df_2['Ice Cream per Person'], df_2['Weather'])\n",
    "c_ = scipy.stats.pearsonr(df_2['Ice Cream Density'], df_2['Income'])\n",
    "d_ = scipy.stats.pearsonr(df_2['Ice Cream Density'], df_2['Weather'])\n",
    "e_ = scipy.stats.pearsonr(df_2['Ice Cream'], df_2['Weather'])\n",
    "f_ = scipy.stats.pearsonr(df_2['Ice Cream'], df_2['Income'])\n",
    "g_ = scipy.stats.pearsonr(df_2['Ice Cream'], df_2['Population'])\n",
    "\n",
    "\n",
    "print('ICpP-Inc '+str(a_[0]))\n",
    "print('ICpP-Wea '+str(b_[0]))\n",
    "print('ICD-Inc '+str(c_[0]))\n",
    "print('ICD-Wea '+str(d_[0]))\n",
    "print('IC-Wea '+str(e_[0]))\n",
    "print('IC-Inc '+str(f_[0]))\n",
    "\n",
    "correlations = [a_[0], b_[0], c_[0], d_[0], e_[0], f_[0], g_[0]]\n",
    "max_r = max(correlations)\n",
    "print('max correlation is: '+str(max_r))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Area</th>\n",
       "      <th>Population</th>\n",
       "      <th>Weather</th>\n",
       "      <th>Income</th>\n",
       "      <th>Ice Cream</th>\n",
       "      <th>Lat</th>\n",
       "      <th>Lon</th>\n",
       "      <th>Population Density</th>\n",
       "      <th>Ice Cream Density</th>\n",
       "      <th>Ice Cream per Person</th>\n",
       "      <th>Ice Cream per Income</th>\n",
       "      <th>Chicago</th>\n",
       "      <th>Houston</th>\n",
       "      <th>Miami</th>\n",
       "      <th>New</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Area</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270615</td>\n",
       "      <td>0.296508</td>\n",
       "      <td>-0.153049</td>\n",
       "      <td>-0.194187</td>\n",
       "      <td>-0.311286</td>\n",
       "      <td>-0.141884</td>\n",
       "      <td>-0.284193</td>\n",
       "      <td>-0.208332</td>\n",
       "      <td>-0.279766</td>\n",
       "      <td>-0.127193</td>\n",
       "      <td>-0.162288</td>\n",
       "      <td>0.145430</td>\n",
       "      <td>0.198329</td>\n",
       "      <td>-0.247269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population</th>\n",
       "      <td>0.270615</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.091169</td>\n",
       "      <td>-0.391671</td>\n",
       "      <td>0.255045</td>\n",
       "      <td>0.058470</td>\n",
       "      <td>-0.150485</td>\n",
       "      <td>-0.171083</td>\n",
       "      <td>-0.199386</td>\n",
       "      <td>-0.325325</td>\n",
       "      <td>0.512648</td>\n",
       "      <td>0.260334</td>\n",
       "      <td>-0.044276</td>\n",
       "      <td>0.002968</td>\n",
       "      <td>-0.310531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weather</th>\n",
       "      <td>0.296508</td>\n",
       "      <td>-0.091169</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.324058</td>\n",
       "      <td>-0.410348</td>\n",
       "      <td>-0.995261</td>\n",
       "      <td>-0.282786</td>\n",
       "      <td>-0.361240</td>\n",
       "      <td>-0.274497</td>\n",
       "      <td>-0.430371</td>\n",
       "      <td>-0.269649</td>\n",
       "      <td>-0.854052</td>\n",
       "      <td>0.565421</td>\n",
       "      <td>0.500579</td>\n",
       "      <td>-0.304611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Income</th>\n",
       "      <td>-0.153049</td>\n",
       "      <td>-0.391671</td>\n",
       "      <td>-0.324058</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.246396</td>\n",
       "      <td>0.374279</td>\n",
       "      <td>0.352012</td>\n",
       "      <td>0.422728</td>\n",
       "      <td>0.434364</td>\n",
       "      <td>0.624515</td>\n",
       "      <td>-0.095848</td>\n",
       "      <td>0.004376</td>\n",
       "      <td>-0.196143</td>\n",
       "      <td>-0.232729</td>\n",
       "      <td>0.604644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ice Cream</th>\n",
       "      <td>-0.194187</td>\n",
       "      <td>0.255045</td>\n",
       "      <td>-0.410348</td>\n",
       "      <td>0.246396</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.432759</td>\n",
       "      <td>0.417947</td>\n",
       "      <td>0.552512</td>\n",
       "      <td>0.582618</td>\n",
       "      <td>0.492562</td>\n",
       "      <td>0.808728</td>\n",
       "      <td>0.232617</td>\n",
       "      <td>-0.404492</td>\n",
       "      <td>-0.070121</td>\n",
       "      <td>0.419190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lat</th>\n",
       "      <td>-0.311286</td>\n",
       "      <td>0.058470</td>\n",
       "      <td>-0.995261</td>\n",
       "      <td>0.374279</td>\n",
       "      <td>0.432759</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.313464</td>\n",
       "      <td>0.419117</td>\n",
       "      <td>0.331731</td>\n",
       "      <td>0.462785</td>\n",
       "      <td>0.264714</td>\n",
       "      <td>0.800160</td>\n",
       "      <td>-0.551465</td>\n",
       "      <td>-0.524661</td>\n",
       "      <td>0.389593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lon</th>\n",
       "      <td>-0.141884</td>\n",
       "      <td>-0.150485</td>\n",
       "      <td>-0.282786</td>\n",
       "      <td>0.352012</td>\n",
       "      <td>0.417947</td>\n",
       "      <td>0.313464</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.557394</td>\n",
       "      <td>0.483900</td>\n",
       "      <td>0.450927</td>\n",
       "      <td>0.281886</td>\n",
       "      <td>0.096142</td>\n",
       "      <td>-0.854529</td>\n",
       "      <td>0.504063</td>\n",
       "      <td>0.666530</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population Density</th>\n",
       "      <td>-0.284193</td>\n",
       "      <td>-0.171083</td>\n",
       "      <td>-0.361240</td>\n",
       "      <td>0.422728</td>\n",
       "      <td>0.552512</td>\n",
       "      <td>0.419117</td>\n",
       "      <td>0.557394</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.933955</td>\n",
       "      <td>0.454223</td>\n",
       "      <td>0.243537</td>\n",
       "      <td>0.001317</td>\n",
       "      <td>-0.361242</td>\n",
       "      <td>-0.118859</td>\n",
       "      <td>0.744911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ice Cream Density</th>\n",
       "      <td>-0.208332</td>\n",
       "      <td>-0.199386</td>\n",
       "      <td>-0.274497</td>\n",
       "      <td>0.434364</td>\n",
       "      <td>0.582618</td>\n",
       "      <td>0.331731</td>\n",
       "      <td>0.483900</td>\n",
       "      <td>0.933955</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.547977</td>\n",
       "      <td>0.235767</td>\n",
       "      <td>-0.069287</td>\n",
       "      <td>-0.271467</td>\n",
       "      <td>-0.114835</td>\n",
       "      <td>0.693720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ice Cream per Person</th>\n",
       "      <td>-0.279766</td>\n",
       "      <td>-0.325325</td>\n",
       "      <td>-0.430371</td>\n",
       "      <td>0.624515</td>\n",
       "      <td>0.492562</td>\n",
       "      <td>0.462785</td>\n",
       "      <td>0.450927</td>\n",
       "      <td>0.454223</td>\n",
       "      <td>0.547977</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.230072</td>\n",
       "      <td>0.192807</td>\n",
       "      <td>-0.394150</td>\n",
       "      <td>-0.119079</td>\n",
       "      <td>0.520002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ice Cream per Income</th>\n",
       "      <td>-0.127193</td>\n",
       "      <td>0.512648</td>\n",
       "      <td>-0.269649</td>\n",
       "      <td>-0.095848</td>\n",
       "      <td>0.808728</td>\n",
       "      <td>0.264714</td>\n",
       "      <td>0.281886</td>\n",
       "      <td>0.243537</td>\n",
       "      <td>0.235767</td>\n",
       "      <td>0.230072</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.254044</td>\n",
       "      <td>-0.352746</td>\n",
       "      <td>0.071259</td>\n",
       "      <td>0.128918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chicago</th>\n",
       "      <td>-0.162288</td>\n",
       "      <td>0.260334</td>\n",
       "      <td>-0.854052</td>\n",
       "      <td>0.004376</td>\n",
       "      <td>0.232617</td>\n",
       "      <td>0.800160</td>\n",
       "      <td>0.096142</td>\n",
       "      <td>0.001317</td>\n",
       "      <td>-0.069287</td>\n",
       "      <td>0.192807</td>\n",
       "      <td>0.254044</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.569495</td>\n",
       "      <td>-0.258697</td>\n",
       "      <td>-0.197583</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Houston</th>\n",
       "      <td>0.145430</td>\n",
       "      <td>-0.044276</td>\n",
       "      <td>0.565421</td>\n",
       "      <td>-0.196143</td>\n",
       "      <td>-0.404492</td>\n",
       "      <td>-0.551465</td>\n",
       "      <td>-0.854529</td>\n",
       "      <td>-0.361242</td>\n",
       "      <td>-0.271467</td>\n",
       "      <td>-0.394150</td>\n",
       "      <td>-0.352746</td>\n",
       "      <td>-0.569495</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.419314</td>\n",
       "      <td>-0.320256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Miami</th>\n",
       "      <td>0.198329</td>\n",
       "      <td>0.002968</td>\n",
       "      <td>0.500579</td>\n",
       "      <td>-0.232729</td>\n",
       "      <td>-0.070121</td>\n",
       "      <td>-0.524661</td>\n",
       "      <td>0.504063</td>\n",
       "      <td>-0.118859</td>\n",
       "      <td>-0.114835</td>\n",
       "      <td>-0.119079</td>\n",
       "      <td>0.071259</td>\n",
       "      <td>-0.258697</td>\n",
       "      <td>-0.419314</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.145479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>New</th>\n",
       "      <td>-0.247269</td>\n",
       "      <td>-0.310531</td>\n",
       "      <td>-0.304611</td>\n",
       "      <td>0.604644</td>\n",
       "      <td>0.419190</td>\n",
       "      <td>0.389593</td>\n",
       "      <td>0.666530</td>\n",
       "      <td>0.744911</td>\n",
       "      <td>0.693720</td>\n",
       "      <td>0.520002</td>\n",
       "      <td>0.128918</td>\n",
       "      <td>-0.197583</td>\n",
       "      <td>-0.320256</td>\n",
       "      <td>-0.145479</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          Area  Population   Weather    Income  Ice Cream  \\\n",
       "Area                  1.000000    0.270615  0.296508 -0.153049  -0.194187   \n",
       "Population            0.270615    1.000000 -0.091169 -0.391671   0.255045   \n",
       "Weather               0.296508   -0.091169  1.000000 -0.324058  -0.410348   \n",
       "Income               -0.153049   -0.391671 -0.324058  1.000000   0.246396   \n",
       "Ice Cream            -0.194187    0.255045 -0.410348  0.246396   1.000000   \n",
       "Lat                  -0.311286    0.058470 -0.995261  0.374279   0.432759   \n",
       "Lon                  -0.141884   -0.150485 -0.282786  0.352012   0.417947   \n",
       "Population Density   -0.284193   -0.171083 -0.361240  0.422728   0.552512   \n",
       "Ice Cream Density    -0.208332   -0.199386 -0.274497  0.434364   0.582618   \n",
       "Ice Cream per Person -0.279766   -0.325325 -0.430371  0.624515   0.492562   \n",
       "Ice Cream per Income -0.127193    0.512648 -0.269649 -0.095848   0.808728   \n",
       "Chicago              -0.162288    0.260334 -0.854052  0.004376   0.232617   \n",
       "Houston               0.145430   -0.044276  0.565421 -0.196143  -0.404492   \n",
       "Miami                 0.198329    0.002968  0.500579 -0.232729  -0.070121   \n",
       "New                  -0.247269   -0.310531 -0.304611  0.604644   0.419190   \n",
       "\n",
       "                           Lat       Lon  Population Density  \\\n",
       "Area                 -0.311286 -0.141884           -0.284193   \n",
       "Population            0.058470 -0.150485           -0.171083   \n",
       "Weather              -0.995261 -0.282786           -0.361240   \n",
       "Income                0.374279  0.352012            0.422728   \n",
       "Ice Cream             0.432759  0.417947            0.552512   \n",
       "Lat                   1.000000  0.313464            0.419117   \n",
       "Lon                   0.313464  1.000000            0.557394   \n",
       "Population Density    0.419117  0.557394            1.000000   \n",
       "Ice Cream Density     0.331731  0.483900            0.933955   \n",
       "Ice Cream per Person  0.462785  0.450927            0.454223   \n",
       "Ice Cream per Income  0.264714  0.281886            0.243537   \n",
       "Chicago               0.800160  0.096142            0.001317   \n",
       "Houston              -0.551465 -0.854529           -0.361242   \n",
       "Miami                -0.524661  0.504063           -0.118859   \n",
       "New                   0.389593  0.666530            0.744911   \n",
       "\n",
       "                      Ice Cream Density  Ice Cream per Person  \\\n",
       "Area                          -0.208332             -0.279766   \n",
       "Population                    -0.199386             -0.325325   \n",
       "Weather                       -0.274497             -0.430371   \n",
       "Income                         0.434364              0.624515   \n",
       "Ice Cream                      0.582618              0.492562   \n",
       "Lat                            0.331731              0.462785   \n",
       "Lon                            0.483900              0.450927   \n",
       "Population Density             0.933955              0.454223   \n",
       "Ice Cream Density              1.000000              0.547977   \n",
       "Ice Cream per Person           0.547977              1.000000   \n",
       "Ice Cream per Income           0.235767              0.230072   \n",
       "Chicago                       -0.069287              0.192807   \n",
       "Houston                       -0.271467             -0.394150   \n",
       "Miami                         -0.114835             -0.119079   \n",
       "New                            0.693720              0.520002   \n",
       "\n",
       "                      Ice Cream per Income   Chicago   Houston     Miami  \\\n",
       "Area                             -0.127193 -0.162288  0.145430  0.198329   \n",
       "Population                        0.512648  0.260334 -0.044276  0.002968   \n",
       "Weather                          -0.269649 -0.854052  0.565421  0.500579   \n",
       "Income                           -0.095848  0.004376 -0.196143 -0.232729   \n",
       "Ice Cream                         0.808728  0.232617 -0.404492 -0.070121   \n",
       "Lat                               0.264714  0.800160 -0.551465 -0.524661   \n",
       "Lon                               0.281886  0.096142 -0.854529  0.504063   \n",
       "Population Density                0.243537  0.001317 -0.361242 -0.118859   \n",
       "Ice Cream Density                 0.235767 -0.069287 -0.271467 -0.114835   \n",
       "Ice Cream per Person              0.230072  0.192807 -0.394150 -0.119079   \n",
       "Ice Cream per Income              1.000000  0.254044 -0.352746  0.071259   \n",
       "Chicago                           0.254044  1.000000 -0.569495 -0.258697   \n",
       "Houston                          -0.352746 -0.569495  1.000000 -0.419314   \n",
       "Miami                             0.071259 -0.258697 -0.419314  1.000000   \n",
       "New                               0.128918 -0.197583 -0.320256 -0.145479   \n",
       "\n",
       "                           New  \n",
       "Area                 -0.247269  \n",
       "Population           -0.310531  \n",
       "Weather              -0.304611  \n",
       "Income                0.604644  \n",
       "Ice Cream             0.419190  \n",
       "Lat                   0.389593  \n",
       "Lon                   0.666530  \n",
       "Population Density    0.744911  \n",
       "Ice Cream Density     0.693720  \n",
       "Ice Cream per Person  0.520002  \n",
       "Ice Cream per Income  0.128918  \n",
       "Chicago              -0.197583  \n",
       "Houston              -0.320256  \n",
       "Miami                -0.145479  \n",
       "New                   1.000000  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n",
       "         normalize=False)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#multiple linear regression\n",
    "#dependent variable = Ice Cream\n",
    "#indepedent variable = Population, Income, Weather, Area, Latitude\n",
    "\n",
    "y = df_2['Ice Cream'].values #np array\n",
    "X = df_2[['Area', 'Population', 'Income', 'Weather', 'Lat',\n",
    "          'Lon', 'Chicago', 'Houston', 'Miami', 'New']].values\n",
    "\n",
    "#normalize the features\n",
    "X = StandardScaler().fit(X).transform(X)\n",
    "\n",
    "#define the model\n",
    "lr = linear_model.LinearRegression()\n",
    "\n",
    "#fit the model\n",
    "lr.fit(X,y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.44092345882109263\n"
     ]
    }
   ],
   "source": [
    "#evaluate lr model\n",
    "\n",
    "#inspect predicted y (predict Ice Cream)\n",
    "y_hat = lr.predict(X)\n",
    "\n",
    "#calculate statistics\n",
    "lr_score = r2_score(y, y_hat)\n",
    "print(lr_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max opportunity is: 11.120443486253642 at 49\n"
     ]
    }
   ],
   "source": [
    "# find outlier in model\n",
    "# this is where to open the shop\n",
    "\n",
    "counter = 0\n",
    "max_opportunity = 0 \n",
    "max_opportunity_loc = 0\n",
    "\n",
    "for act, pred in zip(y, y_hat):\n",
    "    opportunity = pred - act\n",
    "    if opportunity > max_opportunity:\n",
    "        max_opportunity = opportunity\n",
    "        max_opportunity_loc = counter\n",
    "    counter +=1\n",
    "    \n",
    "print('max opportunity is: '+str(max_opportunity)+' at '+str(max_opportunity_loc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "# find zip code corresponding to max opportunity\n",
    "\n",
    "best_zip = df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Zip')]\n",
    "best_lat = df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Lat')]\n",
    "best_lon = df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Lon')]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7fc8e9f797f0>"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Chicago\n",
    "chi_map = folium.Map(location=[41.87, -87.63], zoom_start=12)\n",
    "\n",
    "# plot each zip code by ll, and indicate how many ice cream shops\n",
    "for zip_ in df_2['Zip']:\n",
    "\n",
    "    if df_2.loc[df_2.Zip == zip_, 'Chicago'].values == 1:\n",
    "        lat = df_2.loc[df_2.Zip == zip_, 'Lat'].values\n",
    "        lon = df_2.loc[df_2.Zip == zip_, 'Lon'].values\n",
    "        number = df_2.loc[df_2.Zip == zip_, 'Ice Cream'].values\n",
    "\n",
    "        folium.Circle(location = [lat.item(0), lon.item(0)],\n",
    "                                  popup = str(number.item(0)),\n",
    "                                  radius = number.item(0)*100,\n",
    "                                  color = 'blue',\n",
    "                                  fill = True,\n",
    "                                  fill_color='blue').add_to(chi_map)\n",
    "\n",
    "chi_map\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7fc8e9e65b70>"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Houston\n",
    "houston_map = folium.Map(location=[29.76, -95.37], zoom_start=12)\n",
    "\n",
    "# plot each zip code by ll, and indicate how many ice cream shops\n",
    "for zip_ in df_2['Zip']:\n",
    "\n",
    "    if df_2.loc[df_2.Zip == zip_, 'Houston'].values == 1:\n",
    "        lat = df_2.loc[df_2.Zip == zip_, 'Lat'].values\n",
    "        lon = df_2.loc[df_2.Zip == zip_, 'Lon'].values\n",
    "        number = df_2.loc[df_2.Zip == zip_, 'Ice Cream'].values\n",
    "\n",
    "        folium.Circle(location = [lat.item(0), lon.item(0)],\n",
    "                                  popup = str(number.item(0)),\n",
    "                                  radius = number.item(0)*200,\n",
    "                                  color = 'orange',\n",
    "                                  fill = True,\n",
    "                                  fill_color='orange').add_to(houston_map)\n",
    "\n",
    "houston_map\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7fc8e9e55c50>"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# New York\n",
    "new_map = folium.Map(location=[40.71, -74.00], zoom_start=12)\n",
    "\n",
    "# plot each zip code by ll, and indicate how many ice cream shops\n",
    "for zip_ in df_2['Zip']:\n",
    "\n",
    "    if df_2.loc[df_2.Zip == zip_, 'New'].values == 1:\n",
    "        lat = df_2.loc[df_2.Zip == zip_, 'Lat'].values\n",
    "        lon = df_2.loc[df_2.Zip == zip_, 'Lon'].values\n",
    "        number = df_2.loc[df_2.Zip == zip_, 'Ice Cream'].values\n",
    "\n",
    "        folium.Circle(location = [lat.item(0), lon.item(0)],\n",
    "                                  popup = str(number.item(0)),\n",
    "                                  radius = number.item(0)*100,\n",
    "                                  color = 'red',\n",
    "                                  fill = True,\n",
    "                                  fill_color='red').add_to(new_map)\n",
    "\n",
    "new_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html= onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7fc8e9dd9c88>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Miami\n",
    "miami_map = folium.Map(location=[25.76, -80.20], zoom_start=12)\n",
    "\n",
    "# plot each zip code by ll, and indicate how many ice cream shops\n",
    "for zip_ in df_2['Zip']:\n",
    "\n",
    "    if df_2.loc[df_2.Zip == zip_, 'Miami'].values == 1:\n",
    "        lat = df_2.loc[df_2.Zip == zip_, 'Lat'].values\n",
    "        lon = df_2.loc[df_2.Zip == zip_, 'Lon'].values\n",
    "        number = df_2.loc[df_2.Zip == zip_, 'Ice Cream'].values\n",
    "\n",
    "        folium.Circle(location = [lat.item(0), lon.item(0)],\n",
    "                                  popup = str(number.item(0)),\n",
    "                                  radius = number.item(0)*200,\n",
    "                                  color = 'green',\n",
    "                                  fill = True,\n",
    "                                  fill_color='green').add_to(miami_map)\n",
    "\n",
    "miami_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe src=\"about:blank\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" data-html=PCFET0NUWVBFIGh0bWw+CjxoZWFkPiAgICAKICAgIDxtZXRhIGh0dHAtZXF1aXY9ImNvbnRlbnQtdHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PVVURi04IiAvPgogICAgPHNjcmlwdD5MX1BSRUZFUl9DQU5WQVMgPSBmYWxzZTsgTF9OT19UT1VDSCA9IGZhbHNlOyBMX0RJU0FCTEVfM0QgPSBmYWxzZTs8L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwczovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvTGVhZmxldC5hd2Vzb21lLW1hcmtlcnMvMi4wLjIvbGVhZmxldC5hd2Vzb21lLW1hcmtlcnMuanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2xlYWZsZXRAMS4yLjAvZGlzdC9sZWFmbGV0LmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL21heGNkbi5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjIuMC9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9tYXhjZG4uYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4yLjAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzIi8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vbWF4Y2RuLmJvb3RzdHJhcGNkbi5jb20vZm9udC1hd2Vzb21lLzQuNi4zL2Nzcy9mb250LWF3ZXNvbWUubWluLmNzcyIvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9MZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy8yLjAuMi9sZWFmbGV0LmF3ZXNvbWUtbWFya2Vycy5jc3MiLz4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iaHR0cHM6Ly9yYXdnaXQuY29tL3B5dGhvbi12aXN1YWxpemF0aW9uL2ZvbGl1bS9tYXN0ZXIvZm9saXVtL3RlbXBsYXRlcy9sZWFmbGV0LmF3ZXNvbWUucm90YXRlLmNzcyIvPgogICAgPHN0eWxlPmh0bWwsIGJvZHkge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTttYXJnaW46IDA7cGFkZGluZzogMDt9PC9zdHlsZT4KICAgIDxzdHlsZT4jbWFwIHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtyaWdodDowO2xlZnQ6MDt9PC9zdHlsZT4KICAgIAogICAgICAgICAgICA8c3R5bGU+ICNtYXBfZDM3ZTRlZDM1NjJhNDIzZjk3NWE4MDE2ZTg3MTRlNDIgewogICAgICAgICAgICAgICAgcG9zaXRpb24gOiByZWxhdGl2ZTsKICAgICAgICAgICAgICAgIHdpZHRoIDogMTAwLjAlOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAuMCU7CiAgICAgICAgICAgICAgICBsZWZ0OiAwLjAlOwogICAgICAgICAgICAgICAgdG9wOiAwLjAlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICA8L3N0eWxlPgogICAgICAgIAo8L2hlYWQ+Cjxib2R5PiAgICAKICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb2xpdW0tbWFwIiBpZD0ibWFwX2QzN2U0ZWQzNTYyYTQyM2Y5NzVhODAxNmU4NzE0ZTQyIiA+PC9kaXY+CiAgICAgICAgCjwvYm9keT4KPHNjcmlwdD4gICAgCiAgICAKCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG51bGw7CiAgICAgICAgICAgIAoKICAgICAgICAgICAgdmFyIG1hcF9kMzdlNGVkMzU2MmE0MjNmOTc1YTgwMTZlODcxNGU0MiA9IEwubWFwKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ21hcF9kMzdlNGVkMzU2MmE0MjNmOTc1YTgwMTZlODcxNGU0MicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y2VudGVyOiBbNDAuNzE0LC03NC4wMDhdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogMTIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhCb3VuZHM6IGJvdW5kcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogW10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JsZENvcHlKdW1wOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyczogTC5DUlMuRVBTRzM4NTcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIAogICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciB0aWxlX2xheWVyXzljZTg3NjZkMWVmZDQxM2NhN2M3Y2MyMTlmZDIwMzEzID0gTC50aWxlTGF5ZXIoCiAgICAgICAgICAgICAgICAnaHR0cHM6Ly97c30udGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmcnLAogICAgICAgICAgICAgICAgewogICJhdHRyaWJ1dGlvbiI6IG51bGwsCiAgImRldGVjdFJldGluYSI6IGZhbHNlLAogICJtYXhab29tIjogMTgsCiAgIm1pblpvb20iOiAxLAogICJub1dyYXAiOiBmYWxzZSwKICAic3ViZG9tYWlucyI6ICJhYmMiCn0KICAgICAgICAgICAgICAgICkuYWRkVG8obWFwX2QzN2U0ZWQzNTYyYTQyM2Y5NzVhODAxNmU4NzE0ZTQyKTsKICAgICAgICAKICAgIAoKICAgICAgICAgICAgdmFyIGNpcmNsZV9jNDg2YzUyNjUyYTg0MDMzOWNjZmUyZDEwNTEzOTZiZSA9IEwuY2lyY2xlKAogICAgICAgICAgICAgICAgWzQwLjcxNCwtNzQuMDA4XSwKICAgICAgICAgICAgICAgIHsKICAiYnViYmxpbmdNb3VzZUV2ZW50cyI6IHRydWUsCiAgImNvbG9yIjogImdyZWVuIiwKICAiZGFzaEFycmF5IjogbnVsbCwKICAiZGFzaE9mZnNldCI6IG51bGwsCiAgImZpbGwiOiB0cnVlLAogICJmaWxsQ29sb3IiOiAiZ3JlZW4iLAogICJmaWxsT3BhY2l0eSI6IDAuMiwKICAiZmlsbFJ1bGUiOiAiZXZlbm9kZCIsCiAgImxpbmVDYXAiOiAicm91bmQiLAogICJsaW5lSm9pbiI6ICJyb3VuZCIsCiAgIm9wYWNpdHkiOiAxLjAsCiAgInJhZGl1cyI6IDIwMCwKICAic3Ryb2tlIjogdHJ1ZSwKICAid2VpZ2h0IjogMwp9CiAgICAgICAgICAgICAgICApLmFkZFRvKG1hcF9kMzdlNGVkMzU2MmE0MjNmOTc1YTgwMTZlODcxNGU0Mik7CiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIHZhciBwb3B1cF83OTM4NTVmZDkyNzU0ODA4OWVhODczNWMyZDkxMGRiMiA9IEwucG9wdXAoe21heFdpZHRoOiAnMzAwJ30pOwoKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB2YXIgaHRtbF83MjEyZjE3YjdmYmE0Yjg1YWU3MDVmODMwYmJiMjYyYSA9ICQoJzxkaXYgaWQ9Imh0bWxfNzIxMmYxN2I3ZmJhNGI4NWFlNzA1ZjgzMGJiYjI2MmEiIHN0eWxlPSJ3aWR0aDogMTAwLjAlOyBoZWlnaHQ6IDEwMC4wJTsiPkJlc3QgT3Bwb3J0dW5pdHkgaXM6IDEwMDA3PC9kaXY+JylbMF07CiAgICAgICAgICAgICAgICBwb3B1cF83OTM4NTVmZDkyNzU0ODA4OWVhODczNWMyZDkxMGRiMi5zZXRDb250ZW50KGh0bWxfNzIxMmYxN2I3ZmJhNGI4NWFlNzA1ZjgzMGJiYjI2MmEpOwogICAgICAgICAgICAKCiAgICAgICAgICAgIGNpcmNsZV9jNDg2YzUyNjUyYTg0MDMzOWNjZmUyZDEwNTEzOTZiZS5iaW5kUG9wdXAocG9wdXBfNzkzODU1ZmQ5Mjc1NDgwODllYTg3MzVjMmQ5MTBkYjIpOwoKICAgICAgICAgICAgCiAgICAgICAgCjwvc2NyaXB0Pg== onload=\"this.contentDocument.open();this.contentDocument.write(atob(this.getAttribute('data-html')));this.contentDocument.close();\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7fc8b651a668>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# map of max opportunity\n",
    "\n",
    "\n",
    "# best_lat best_lon defined above\n",
    "best_map = folium.Map(location=[best_lat, best_lon], zoom_start=12)\n",
    "\n",
    "#draw a circle at the best_zip\n",
    "folium.Circle(location = [best_lat, best_lon],\n",
    "              popup = 'Best Opportunity is: '+str(best_zip),\n",
    "              radius = 200,\n",
    "              color = 'green',\n",
    "              fill = True,\n",
    "              fill_color='green').add_to(best_map)\n",
    "\n",
    "best_map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Best Opportunity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>City</th>\n",
       "      <td>New</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zip</th>\n",
       "      <td>10007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Population</th>\n",
       "      <td>7023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Income</th>\n",
       "      <td>246813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Avg Temperature</th>\n",
       "      <td>62.3333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Area</th>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Current Ice Cream Shops</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Modelled Ice Cream Shops</th>\n",
       "      <td>19.1204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Opportunity</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Best Opportunity\n",
       "City                                  New\n",
       "Zip                                 10007\n",
       "Population                           7023\n",
       "Income                             246813\n",
       "Avg Temperature                   62.3333\n",
       "Area                                  0.1\n",
       "Current Ice Cream Shops                 8\n",
       "Modelled Ice Cream Shops          19.1204\n",
       "Opportunity                            11"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summarize conclusion\n",
    "\n",
    "summary_dict = {'City':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('City')],\n",
    "                'Zip':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Zip')],\n",
    "                'Population':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Population')],\n",
    "                'Income':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Income')],\n",
    "                'Avg Temperature':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Weather')],\n",
    "                'Area':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Area')],\n",
    "                'Current Ice Cream Shops':df_2.iloc[max_opportunity_loc, df_2.columns.get_loc('Ice Cream')],\n",
    "                'Modelled Ice Cream Shops':y_hat[max_opportunity_loc],\n",
    "                'Opportunity':round(max_opportunity,0)}\n",
    "\n",
    "summary_df = pd.DataFrame(summary_dict, index=['Best Opportunity'])\n",
    "summary_df.T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python",
   "language": "python",
   "name": "conda-env-python-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
